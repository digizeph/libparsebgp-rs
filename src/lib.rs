/* automatically generated by rust-bindgen 0.55.1 */

pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 32;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const LIBPARSEBGP_MAJOR_VERSION: u32 = 1;
pub const LIBPARSEBGP_MID_VERSION: u32 = 0;
pub const LIBPARSEBGP_MINOR_VERSION: u32 = 0;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub const parsebgp_bgp_notification_code_t_PARSEBGP_BGP_NOTIFY_MSG_HDR_ERR:
    parsebgp_bgp_notification_code_t = 1;
pub const parsebgp_bgp_notification_code_t_PARSEBGP_BGP_NOTIFY_OPEN_MSG_ERR:
    parsebgp_bgp_notification_code_t = 2;
pub const parsebgp_bgp_notification_code_t_PARSEBGP_BGP_NOTIFY_UPDATE_MSG_ERR:
    parsebgp_bgp_notification_code_t = 3;
pub const parsebgp_bgp_notification_code_t_PARSEBGP_BGP_NOTIFY_HOLD_TIMER_EXPIRED:
    parsebgp_bgp_notification_code_t = 4;
pub const parsebgp_bgp_notification_code_t_PARSEBGP_BGP_NOTIFY_FSM_ERR:
    parsebgp_bgp_notification_code_t = 5;
pub const parsebgp_bgp_notification_code_t_PARSEBGP_BGP_NOTIFY_CEASE:
    parsebgp_bgp_notification_code_t = 6;
pub const parsebgp_bgp_notification_code_t_PARSEBGP_BGP_NOTIFY_ROUTE_REFRESH:
    parsebgp_bgp_notification_code_t = 7;
pub type parsebgp_bgp_notification_code_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_notification_msg_hdr_subcode_t_PARSEBGP_BGP_NOTIFY_MSG_HDR_CONN_NOT_SYNC:
    parsebgp_bgp_notification_msg_hdr_subcode_t = 1;
pub const parsebgp_bgp_notification_msg_hdr_subcode_t_PARSEBGP_BGP_NOTIFY_MSG_HDR_BAD_MSG_LEN:
    parsebgp_bgp_notification_msg_hdr_subcode_t = 2;
pub const parsebgp_bgp_notification_msg_hdr_subcode_t_PARSEBGP_BGP_NOTIFY_MSG_HDR_BAD_MSG_TYPE:
    parsebgp_bgp_notification_msg_hdr_subcode_t = 3;
pub type parsebgp_bgp_notification_msg_hdr_subcode_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_notification_open_msg_subcode_t_PARSEBGP_BGP_NOTIFY_OPEN_UNSUPPORTED_VER:
    parsebgp_bgp_notification_open_msg_subcode_t = 1;
pub const parsebgp_bgp_notification_open_msg_subcode_t_PARSEBGP_BGP_NOTIFY_OPEN_BAD_PEER_AS:
    parsebgp_bgp_notification_open_msg_subcode_t = 2;
pub const parsebgp_bgp_notification_open_msg_subcode_t_PARSEBGP_BGP_NOTIFY_OPEN_BAD_BGP_ID:
    parsebgp_bgp_notification_open_msg_subcode_t = 3;
pub const parsebgp_bgp_notification_open_msg_subcode_t_PARSEBGP_BGP_NOTIFY_OPEN_UNSUPPORTED_OPT_PARAM : parsebgp_bgp_notification_open_msg_subcode_t = 4 ;
pub const parsebgp_bgp_notification_open_msg_subcode_t_PARSEBGP_BGP_NOTIFY_OPEN_UNACCEPTABLE_HOLD_TIME : parsebgp_bgp_notification_open_msg_subcode_t = 5 ;
pub type parsebgp_bgp_notification_open_msg_subcode_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_MALFORMED_ATTR_LIST : parsebgp_bgp_notification_update_msg_subcode_t = 1 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_UNRECOGNIZED_WELL_KNOWN_ATTR : parsebgp_bgp_notification_update_msg_subcode_t = 2 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_MISSING_WELL_KNOWN_ATTR : parsebgp_bgp_notification_update_msg_subcode_t = 3 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_ATTR_FLAGS_ERROR : parsebgp_bgp_notification_update_msg_subcode_t = 4 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_ATTR_LEN_ERROR : parsebgp_bgp_notification_update_msg_subcode_t = 5 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_ATTR_INVALID_ORIGIN_ATTR : parsebgp_bgp_notification_update_msg_subcode_t = 6 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_INVALID_NEXT_HOP_ATTR : parsebgp_bgp_notification_update_msg_subcode_t = 8 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_OPT_ATTR_ERROR : parsebgp_bgp_notification_update_msg_subcode_t = 9 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_INVALID_NET_FIELD : parsebgp_bgp_notification_update_msg_subcode_t = 10 ;
pub const parsebgp_bgp_notification_update_msg_subcode_t_PARSEBGP_BGP_NOTIFY_UPDATE_MALFORMED_AS_PATH : parsebgp_bgp_notification_update_msg_subcode_t = 11 ;
pub type parsebgp_bgp_notification_update_msg_subcode_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_notification_cease_subcode_t_CEASE_MAX_PREFIXES:
    parsebgp_bgp_notification_cease_subcode_t = 1;
pub const parsebgp_bgp_notification_cease_subcode_t_CEASE_ADMIN_SHUTDOWN:
    parsebgp_bgp_notification_cease_subcode_t = 2;
pub const parsebgp_bgp_notification_cease_subcode_t_CEASE_PEER_DECONFIG:
    parsebgp_bgp_notification_cease_subcode_t = 3;
pub const parsebgp_bgp_notification_cease_subcode_t_CEASE_ADMIN_RESET:
    parsebgp_bgp_notification_cease_subcode_t = 4;
pub const parsebgp_bgp_notification_cease_subcode_t_CEASE_CONN_REJECT:
    parsebgp_bgp_notification_cease_subcode_t = 5;
pub const parsebgp_bgp_notification_cease_subcode_t_CEASE_OTHER_CONFIG_CHANGE:
    parsebgp_bgp_notification_cease_subcode_t = 6;
pub const parsebgp_bgp_notification_cease_subcode_t_CEASE_CONN_COLLISION_RES:
    parsebgp_bgp_notification_cease_subcode_t = 7;
pub const parsebgp_bgp_notification_cease_subcode_t_CEASE_OUT_OF_RESOURCES:
    parsebgp_bgp_notification_cease_subcode_t = 8;
pub type parsebgp_bgp_notification_cease_subcode_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_notification_route_refresh_msg_subcode_t_PARSEBGP_BGP_NOTIFY_ROUTE_REFRESH_PARSEBGP_INVALID_MSG_LEN : parsebgp_bgp_notification_route_refresh_msg_subcode_t = 1 ;
pub type parsebgp_bgp_notification_route_refresh_msg_subcode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_notification {
    pub code: u8,
    pub subcode: u8,
    pub data: *mut u8,
    pub _data_alloc_len: ::std::os::raw::c_int,
    pub data_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_notification() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_notification>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_notification))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_notification>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_notification))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_notification>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_notification>())).subcode as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(subcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_notification>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_notification>()))._data_alloc_len as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(_data_alloc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_notification>())).data_len as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(data_len)
        )
    );
}
pub type parsebgp_bgp_notification_t = parsebgp_bgp_notification;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_MPBGP:
    parsebgp_bgp_open_capability_code_t = 1;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_ROUTE_REFRESH:
    parsebgp_bgp_open_capability_code_t = 2;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_OUTBOUND_FILTER:
    parsebgp_bgp_open_capability_code_t = 3;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_GRACEFUL_RESTART:
    parsebgp_bgp_open_capability_code_t = 64;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_AS4:
    parsebgp_bgp_open_capability_code_t = 65;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_MULTI_SESSION:
    parsebgp_bgp_open_capability_code_t = 68;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_ROUTE_REFRESH_ENHANCED : parsebgp_bgp_open_capability_code_t = 70 ;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_LLGR:
    parsebgp_bgp_open_capability_code_t = 71;
pub const parsebgp_bgp_open_capability_code_t_PARSEBGP_BGP_OPEN_CAPABILITY_ROUTE_REFRESH_OLD:
    parsebgp_bgp_open_capability_code_t = 128;
pub type parsebgp_bgp_open_capability_code_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_open_capability_mpbgp {
    pub afi: u16,
    pub reserved: u8,
    pub safi: u8,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_open_capability_mpbgp() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_open_capability_mpbgp>(),
        4usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_open_capability_mpbgp))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_open_capability_mpbgp>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_open_capability_mpbgp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability_mpbgp>())).afi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability_mpbgp),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability_mpbgp>())).reserved as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability_mpbgp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability_mpbgp>())).safi as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability_mpbgp),
            "::",
            stringify!(safi)
        )
    );
}
pub type parsebgp_bgp_open_capability_mpbgp_t = parsebgp_bgp_open_capability_mpbgp;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_open_capability {
    pub code: u8,
    pub len: u8,
    pub values: parsebgp_bgp_open_capability__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union parsebgp_bgp_open_capability__bindgen_ty_1 {
    pub mpbgp: parsebgp_bgp_open_capability_mpbgp_t,
    pub asn: u32,
    pub datap: *mut u8,
    pub databuf: [u8; 8usize],
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_open_capability__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_open_capability__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_open_capability__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability__bindgen_ty_1>())).mpbgp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1),
            "::",
            stringify!(mpbgp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability__bindgen_ty_1>())).asn as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1),
            "::",
            stringify!(asn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability__bindgen_ty_1>())).datap as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1),
            "::",
            stringify!(datap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability__bindgen_ty_1>())).databuf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1),
            "::",
            stringify!(databuf)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_open_capability() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_open_capability>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_open_capability))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_open_capability>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_open_capability))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability>())).code as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability>())).len as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability>())).values as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability),
            "::",
            stringify!(values)
        )
    );
}
pub type parsebgp_bgp_open_capability_t = parsebgp_bgp_open_capability;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_open {
    pub version: u8,
    pub asn: u16,
    pub hold_time: u16,
    pub bgp_id: [u8; 4usize],
    pub param_len: u8,
    pub capabilities: *mut parsebgp_bgp_open_capability_t,
    pub _capabilities_alloc_cnt: ::std::os::raw::c_int,
    pub capabilities_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_open() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_open>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_open))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_open>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_open))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).asn as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).hold_time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(hold_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).bgp_id as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(bgp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).param_len as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(param_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).capabilities as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open>()))._capabilities_alloc_cnt as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(_capabilities_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open>())).capabilities_cnt as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(capabilities_cnt)
        )
    );
}
pub type parsebgp_bgp_open_t = parsebgp_bgp_open;
pub const parsebgp_bgp_route_refresh_subtype_t_PARSEBGP_BGP_ROUTE_REFRESH_TYPE_NORMAL:
    parsebgp_bgp_route_refresh_subtype_t = 0;
pub const parsebgp_bgp_route_refresh_subtype_t_PARSEBGP_BGP_ROUTE_REFRESH_TYPE_BEGIN:
    parsebgp_bgp_route_refresh_subtype_t = 1;
pub const parsebgp_bgp_route_refresh_subtype_t_PARSEBGP_BGP_ROUTE_REFRESH_TYPE_END:
    parsebgp_bgp_route_refresh_subtype_t = 2;
pub type parsebgp_bgp_route_refresh_subtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_route_refresh {
    pub afi: u16,
    pub subtype: u8,
    pub safi: u8,
    pub data: *mut u8,
    pub _data_alloc_len: ::std::os::raw::c_int,
    pub data_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_route_refresh() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_route_refresh>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_route_refresh))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_route_refresh>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_route_refresh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).afi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).subtype as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).safi as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>()))._data_alloc_len as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(_data_alloc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).data_len as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(data_len)
        )
    );
}
pub type parsebgp_bgp_route_refresh_t = parsebgp_bgp_route_refresh;
pub const parsebgp_bgp_afi_t_PARSEBGP_BGP_AFI_IPV4: parsebgp_bgp_afi_t = 1;
pub const parsebgp_bgp_afi_t_PARSEBGP_BGP_AFI_IPV6: parsebgp_bgp_afi_t = 2;
pub type parsebgp_bgp_afi_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_safi_t_PARSEBGP_BGP_SAFI_UNICAST: parsebgp_bgp_safi_t = 1;
pub const parsebgp_bgp_safi_t_PARSEBGP_BGP_SAFI_MULTICAST: parsebgp_bgp_safi_t = 2;
pub const parsebgp_bgp_safi_t_PARSEBGP_BGP_SAFI_MPLS: parsebgp_bgp_safi_t = 128;
pub type parsebgp_bgp_safi_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_prefix_type_t_PARSEBGP_BGP_PREFIX_UNICAST_IPV4: parsebgp_bgp_prefix_type_t =
    1;
pub const parsebgp_bgp_prefix_type_t_PARSEBGP_BGP_PREFIX_UNICAST_IPV6: parsebgp_bgp_prefix_type_t =
    2;
pub const parsebgp_bgp_prefix_type_t_PARSEBGP_BGP_PREFIX_MULTICAST_IPV4:
    parsebgp_bgp_prefix_type_t = 1;
pub const parsebgp_bgp_prefix_type_t_PARSEBGP_BGP_PREFIX_MULTICAST_IPV6:
    parsebgp_bgp_prefix_type_t = 2;
pub type parsebgp_bgp_prefix_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_prefix {
    pub type_: u8,
    pub afi: u16,
    pub safi: u8,
    pub len: u8,
    pub addr: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_prefix() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_prefix>(),
        22usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_prefix))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_prefix>(),
        2usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_prefix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).afi as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).safi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).len as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).addr as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(addr)
        )
    );
}
pub type parsebgp_bgp_prefix_t = parsebgp_bgp_prefix;
pub const parsebgp_bgp_update_ext_community_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_TRANS_TWO_OCTET_AS:
    parsebgp_bgp_update_ext_community_type_t = 0;
pub const parsebgp_bgp_update_ext_community_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_TRANS_IPV4:
    parsebgp_bgp_update_ext_community_type_t = 1;
pub const parsebgp_bgp_update_ext_community_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_TRANS_FOUR_OCTET_AS : parsebgp_bgp_update_ext_community_type_t = 2 ;
pub const parsebgp_bgp_update_ext_community_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_TRANS_OPAQUE:
    parsebgp_bgp_update_ext_community_type_t = 3;
pub const parsebgp_bgp_update_ext_community_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_NONTRANS_TWO_OCTET_AS : parsebgp_bgp_update_ext_community_type_t = 64 ;
pub const parsebgp_bgp_update_ext_community_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_NONTRANS_IPV4:
    parsebgp_bgp_update_ext_community_type_t = 65;
pub const parsebgp_bgp_update_ext_community_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_NONTRANS_FOUR_OCTET_AS : parsebgp_bgp_update_ext_community_type_t = 66 ;
pub const parsebgp_bgp_update_ext_community_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_NONTRANS_OPAQUE:
    parsebgp_bgp_update_ext_community_type_t = 67;
pub type parsebgp_bgp_update_ext_community_type_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_update_ext_community_ipv6_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_TRANS_IPV6:
    parsebgp_bgp_update_ext_community_ipv6_type_t = 0;
pub const parsebgp_bgp_update_ext_community_ipv6_type_t_PARSEBGP_BGP_EXT_COMM_TYPE_NONTRANS_IPV6:
    parsebgp_bgp_update_ext_community_ipv6_type_t = 64;
pub type parsebgp_bgp_update_ext_community_ipv6_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_ext_community_two_octet {
    pub global_admin: u16,
    pub local_admin: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community_two_octet() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community_two_octet>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_ext_community_two_octet)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community_two_octet>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community_two_octet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_two_octet>())).global_admin
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_two_octet),
            "::",
            stringify!(global_admin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_two_octet>())).local_admin
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_two_octet),
            "::",
            stringify!(local_admin)
        )
    );
}
pub type parsebgp_bgp_update_ext_community_two_octet_t =
    parsebgp_bgp_update_ext_community_two_octet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_ext_community_ip_addr {
    pub global_admin_ip_afi: u16,
    pub global_admin_ip: [u8; 16usize],
    pub local_admin: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community_ip_addr() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community_ip_addr>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community_ip_addr>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_ip_addr>()))
                .global_admin_ip_afi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr),
            "::",
            stringify!(global_admin_ip_afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_ip_addr>())).global_admin_ip
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr),
            "::",
            stringify!(global_admin_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_ip_addr>())).local_admin
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr),
            "::",
            stringify!(local_admin)
        )
    );
}
pub type parsebgp_bgp_update_ext_community_ip_addr_t = parsebgp_bgp_update_ext_community_ip_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_ext_community_four_octet {
    pub global_admin: u32,
    pub local_admin: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community_four_octet() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community_four_octet>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_ext_community_four_octet)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community_four_octet>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community_four_octet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_four_octet>())).global_admin
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_four_octet),
            "::",
            stringify!(global_admin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_four_octet>())).local_admin
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_four_octet),
            "::",
            stringify!(local_admin)
        )
    );
}
pub type parsebgp_bgp_update_ext_community_four_octet_t =
    parsebgp_bgp_update_ext_community_four_octet;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_update_ext_community {
    pub type_: u8,
    pub subtype: u8,
    pub types: parsebgp_bgp_update_ext_community__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union parsebgp_bgp_update_ext_community__bindgen_ty_1 {
    pub two_octet: parsebgp_bgp_update_ext_community_two_octet_t,
    pub ip_addr: parsebgp_bgp_update_ext_community_ip_addr_t,
    pub four_octet: parsebgp_bgp_update_ext_community_four_octet_t,
    pub opaque: [u8; 6usize],
    pub unknown: [u8; 7usize],
    _bindgen_union_align: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community__bindgen_ty_1>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).two_octet
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(two_octet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).ip_addr
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(ip_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).four_octet
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(four_octet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).opaque
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).unknown
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(unknown)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_ext_community))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community>())).subtype as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community>())).types as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_bgp_update_ext_community_t = parsebgp_bgp_update_ext_community;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_ext_communities {
    pub communities: *mut parsebgp_bgp_update_ext_community_t,
    pub _communities_alloc_cnt: ::std::os::raw::c_int,
    pub communities_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_communities() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_communities>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_ext_communities))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_communities>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_communities>())).communities as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_communities),
            "::",
            stringify!(communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_communities>()))._communities_alloc_cnt
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_communities),
            "::",
            stringify!(_communities_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_communities>())).communities_cnt
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_communities),
            "::",
            stringify!(communities_cnt)
        )
    );
}
pub type parsebgp_bgp_update_ext_communities_t = parsebgp_bgp_update_ext_communities;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_mp_reach {
    pub afi: u16,
    pub safi: u8,
    pub next_hop_len: u8,
    pub next_hop: [u8; 16usize],
    pub next_hop_ll: [u8; 16usize],
    pub reserved: u8,
    pub nlris: *mut parsebgp_bgp_prefix_t,
    pub _nlris_alloc_cnt: ::std::os::raw::c_int,
    pub nlris_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_mp_reach() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_mp_reach>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_mp_reach))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_mp_reach>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_mp_reach))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).afi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).safi as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).next_hop_len as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(next_hop_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).next_hop as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(next_hop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).next_hop_ll as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(next_hop_ll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).reserved as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).nlris as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(nlris)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>()))._nlris_alloc_cnt as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(_nlris_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).nlris_cnt as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(nlris_cnt)
        )
    );
}
pub type parsebgp_bgp_update_mp_reach_t = parsebgp_bgp_update_mp_reach;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_mp_unreach {
    pub afi: u16,
    pub safi: u8,
    pub withdrawn_nlris: *mut parsebgp_bgp_prefix_t,
    pub _withdrawn_nlris_alloc_cnt: ::std::os::raw::c_int,
    pub withdrawn_nlris_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_mp_unreach() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_mp_unreach>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_mp_unreach))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_mp_unreach>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_mp_unreach))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>())).afi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>())).safi as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>())).withdrawn_nlris as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(withdrawn_nlris)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>()))._withdrawn_nlris_alloc_cnt
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(_withdrawn_nlris_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>())).withdrawn_nlris_cnt
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(withdrawn_nlris_cnt)
        )
    );
}
pub type parsebgp_bgp_update_mp_unreach_t = parsebgp_bgp_update_mp_unreach;
pub const parsebgp_bgp_update_origin_type_t_PARSEBGP_BGP_UPDATE_ORIGIN_IGP:
    parsebgp_bgp_update_origin_type_t = 0;
pub const parsebgp_bgp_update_origin_type_t_PARSEBGP_BGP_UPDATE_ORIGIN_EGP:
    parsebgp_bgp_update_origin_type_t = 1;
pub const parsebgp_bgp_update_origin_type_t_PARSEBGP_BGP_UPDATE_ORIGIN_INCOMPLETE:
    parsebgp_bgp_update_origin_type_t = 2;
pub type parsebgp_bgp_update_origin_type_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_update_as_path_seg_type_t_PARSEBGP_BGP_UPDATE_AS_PATH_SEG_AS_SET:
    parsebgp_bgp_update_as_path_seg_type_t = 1;
pub const parsebgp_bgp_update_as_path_seg_type_t_PARSEBGP_BGP_UPDATE_AS_PATH_SEG_AS_SEQ:
    parsebgp_bgp_update_as_path_seg_type_t = 2;
pub const parsebgp_bgp_update_as_path_seg_type_t_PARSEBGP_BGP_UPDATE_AS_PATH_SEG_CONFED_SEQ:
    parsebgp_bgp_update_as_path_seg_type_t = 3;
pub const parsebgp_bgp_update_as_path_seg_type_t_PARSEBGP_BGP_UPDATE_AS_PATH_SEG_CONFED_SET:
    parsebgp_bgp_update_as_path_seg_type_t = 4;
pub type parsebgp_bgp_update_as_path_seg_type_t = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_as_path_seg {
    pub type_: u8,
    pub asns_cnt: u8,
    pub asns: *mut u32,
    pub _asns_alloc_cnt: u8,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_as_path_seg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_as_path_seg>(),
        11usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_as_path_seg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_as_path_seg>(),
        1usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_as_path_seg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path_seg>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path_seg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path_seg>())).asns_cnt as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path_seg),
            "::",
            stringify!(asns_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path_seg>())).asns as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path_seg),
            "::",
            stringify!(asns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path_seg>()))._asns_alloc_cnt as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path_seg),
            "::",
            stringify!(_asns_alloc_cnt)
        )
    );
}
pub type parsebgp_bgp_update_as_path_seg_t = parsebgp_bgp_update_as_path_seg;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_as_path {
    pub segs: *mut parsebgp_bgp_update_as_path_seg_t,
    pub _segs_alloc_cnt: u8,
    pub segs_cnt: u8,
    pub asns_cnt: u8,
    pub asn_4_byte: u8,
    pub raw: *mut u8,
    pub _raw_alloc_len: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_as_path() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_as_path>(),
        22usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_as_path))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_as_path>(),
        1usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_as_path))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).segs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(segs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>()))._segs_alloc_cnt as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(_segs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).segs_cnt as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(segs_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).asns_cnt as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(asns_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).asn_4_byte as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(asn_4_byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).raw as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>()))._raw_alloc_len as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(_raw_alloc_len)
        )
    );
}
pub type parsebgp_bgp_update_as_path_t = parsebgp_bgp_update_as_path;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_aggregator {
    pub asn: u32,
    pub addr: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_aggregator() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_aggregator>(),
        8usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_aggregator))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_aggregator>(),
        4usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_aggregator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_aggregator>())).asn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_aggregator),
            "::",
            stringify!(asn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_aggregator>())).addr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_aggregator),
            "::",
            stringify!(addr)
        )
    );
}
pub type parsebgp_bgp_update_aggregator_t = parsebgp_bgp_update_aggregator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_communities {
    pub communities: *mut u32,
    pub _communities_alloc_cnt: ::std::os::raw::c_int,
    pub communities_cnt: ::std::os::raw::c_int,
    pub raw: *mut u8,
    pub _raw_alloc_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_communities() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_communities>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_communities))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_communities>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_communities))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>())).communities as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>()))._communities_alloc_cnt
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(_communities_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>())).communities_cnt as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(communities_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>())).raw as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>()))._raw_alloc_len as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(_raw_alloc_len)
        )
    );
}
pub type parsebgp_bgp_update_communities_t = parsebgp_bgp_update_communities;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_cluster_list {
    pub cluster_ids: *mut u32,
    pub _cluster_ids_alloc_cnt: ::std::os::raw::c_int,
    pub cluster_ids_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_cluster_list() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_cluster_list>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_cluster_list))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_cluster_list>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_cluster_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_cluster_list>())).cluster_ids as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_cluster_list),
            "::",
            stringify!(cluster_ids)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_cluster_list>()))._cluster_ids_alloc_cnt
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_cluster_list),
            "::",
            stringify!(_cluster_ids_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_cluster_list>())).cluster_ids_cnt as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_cluster_list),
            "::",
            stringify!(cluster_ids_cnt)
        )
    );
}
pub type parsebgp_bgp_update_cluster_list_t = parsebgp_bgp_update_cluster_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_as_pathlimit {
    pub max_asns: u8,
    pub asn: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_as_pathlimit() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_as_pathlimit>(),
        8usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_as_pathlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_as_pathlimit>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_as_pathlimit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_pathlimit>())).max_asns as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_pathlimit),
            "::",
            stringify!(max_asns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_pathlimit>())).asn as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_pathlimit),
            "::",
            stringify!(asn)
        )
    );
}
pub type parsebgp_bgp_update_as_pathlimit_t = parsebgp_bgp_update_as_pathlimit;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_large_community {
    pub global_admin: u32,
    pub local_1: u32,
    pub local_2: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_large_community() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_large_community>(),
        12usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_large_community))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_large_community>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_large_community)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_community>())).global_admin as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_community),
            "::",
            stringify!(global_admin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_community>())).local_1 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_community),
            "::",
            stringify!(local_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_community>())).local_2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_community),
            "::",
            stringify!(local_2)
        )
    );
}
pub type parsebgp_bgp_update_large_community_t = parsebgp_bgp_update_large_community;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_large_communities {
    pub communities: *mut parsebgp_bgp_update_large_community_t,
    pub _communities_alloc_cnt: ::std::os::raw::c_int,
    pub communities_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_large_communities() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_large_communities>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_large_communities)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_large_communities>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_large_communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_communities>())).communities
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_communities),
            "::",
            stringify!(communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_communities>()))._communities_alloc_cnt
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_communities),
            "::",
            stringify!(_communities_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_communities>())).communities_cnt
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_communities),
            "::",
            stringify!(communities_cnt)
        )
    );
}
pub type parsebgp_bgp_update_large_communities_t = parsebgp_bgp_update_large_communities;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_ORIGIN:
    parsebgp_bgp_update_path_attr_type_t = 1;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_AS_PATH:
    parsebgp_bgp_update_path_attr_type_t = 2;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_NEXT_HOP:
    parsebgp_bgp_update_path_attr_type_t = 3;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_MED:
    parsebgp_bgp_update_path_attr_type_t = 4;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_LOCAL_PREF:
    parsebgp_bgp_update_path_attr_type_t = 5;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_ATOMIC_AGGREGATE:
    parsebgp_bgp_update_path_attr_type_t = 6;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_AGGREGATOR:
    parsebgp_bgp_update_path_attr_type_t = 7;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_COMMUNITIES:
    parsebgp_bgp_update_path_attr_type_t = 8;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_ORIGINATOR_ID:
    parsebgp_bgp_update_path_attr_type_t = 9;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_CLUSTER_LIST:
    parsebgp_bgp_update_path_attr_type_t = 10;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_MP_REACH_NLRI:
    parsebgp_bgp_update_path_attr_type_t = 14;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_MP_UNREACH_NLRI:
    parsebgp_bgp_update_path_attr_type_t = 15;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_EXT_COMMUNITIES:
    parsebgp_bgp_update_path_attr_type_t = 16;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_AS4_PATH:
    parsebgp_bgp_update_path_attr_type_t = 17;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_AS4_AGGREGATOR:
    parsebgp_bgp_update_path_attr_type_t = 18;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_AS_PATHLIMIT:
    parsebgp_bgp_update_path_attr_type_t = 21;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_IPV6_EXT_COMMUNITIES:
    parsebgp_bgp_update_path_attr_type_t = 25;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_BGP_LS:
    parsebgp_bgp_update_path_attr_type_t = 29;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTR_TYPE_LARGE_COMMUNITIES:
    parsebgp_bgp_update_path_attr_type_t = 32;
pub const parsebgp_bgp_update_path_attr_type_t_PARSEBGP_BGP_PATH_ATTRS_LEN:
    parsebgp_bgp_update_path_attr_type_t = 33;
pub type parsebgp_bgp_update_path_attr_type_t = ::std::os::raw::c_uint;
pub const parsebgp_bgp_update_path_attr_flag_t_PARSEBGP_BGP_PATH_ATTR_FLAG_OPTIONAL:
    parsebgp_bgp_update_path_attr_flag_t = 128;
pub const parsebgp_bgp_update_path_attr_flag_t_PARSEBGP_BGP_PATH_ATTR_FLAG_TRANSITIVE:
    parsebgp_bgp_update_path_attr_flag_t = 64;
pub const parsebgp_bgp_update_path_attr_flag_t_PARSEBGP_BGP_PATH_ATTR_FLAG_PARTIAL:
    parsebgp_bgp_update_path_attr_flag_t = 32;
pub const parsebgp_bgp_update_path_attr_flag_t_PARSEBGP_BGP_PATH_ATTR_FLAG_EXTENDED:
    parsebgp_bgp_update_path_attr_flag_t = 16;
pub type parsebgp_bgp_update_path_attr_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_update_path_attr {
    pub flags: u8,
    pub type_: u8,
    pub len: u16,
    pub data: parsebgp_bgp_update_path_attr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union parsebgp_bgp_update_path_attr__bindgen_ty_1 {
    pub origin: u8,
    pub as_path: *mut parsebgp_bgp_update_as_path_t,
    pub next_hop: [u8; 4usize],
    pub med: u32,
    pub local_pref: u32,
    pub aggregator: parsebgp_bgp_update_aggregator_t,
    pub communities: *mut parsebgp_bgp_update_communities_t,
    pub originator_id: u32,
    pub cluster_list: *mut parsebgp_bgp_update_cluster_list_t,
    pub mp_reach: *mut parsebgp_bgp_update_mp_reach_t,
    pub mp_unreach: *mut parsebgp_bgp_update_mp_unreach_t,
    pub ext_communities: *mut parsebgp_bgp_update_ext_communities_t,
    pub as_pathlimit: parsebgp_bgp_update_as_pathlimit_t,
    pub large_communities: *mut parsebgp_bgp_update_large_communities_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_path_attr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_path_attr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_path_attr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).origin
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).as_path
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(as_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).next_hop
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(next_hop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).med as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(med)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).local_pref
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(local_pref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).aggregator
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(aggregator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).communities
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).originator_id
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(originator_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).cluster_list
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(cluster_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).mp_reach
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(mp_reach)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).mp_unreach
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(mp_unreach)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).ext_communities
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(ext_communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).as_pathlimit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(as_pathlimit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>()))
                .large_communities as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(large_communities)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_path_attr() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_path_attr>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_path_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_path_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_path_attr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr>())).type_ as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr>())).len as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr>())).data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_bgp_update_path_attr_t = parsebgp_bgp_update_path_attr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_update_path_attrs {
    pub len: u16,
    pub attrs: [parsebgp_bgp_update_path_attr_t; 33usize],
    pub attrs_used: *mut u8,
    pub _attrs_used_alloc_cnt: ::std::os::raw::c_int,
    pub attrs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_path_attrs() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_path_attrs>(),
        552usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_path_attrs))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_path_attrs>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_path_attrs))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>())).attrs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>())).attrs_used as *const _
                as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(attrs_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>()))._attrs_used_alloc_cnt
                as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(_attrs_used_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>())).attrs_cnt as *const _
                as usize
        },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(attrs_cnt)
        )
    );
}
pub type parsebgp_bgp_update_path_attrs_t = parsebgp_bgp_update_path_attrs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_nlris {
    pub len: u16,
    pub prefixes: *mut parsebgp_bgp_prefix_t,
    pub _prefixes_alloc_cnt: ::std::os::raw::c_int,
    pub prefixes_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_nlris() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_nlris>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_nlris))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_nlris>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_nlris))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_update_nlris>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_nlris),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_nlris>())).prefixes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_nlris),
            "::",
            stringify!(prefixes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_nlris>()))._prefixes_alloc_cnt as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_nlris),
            "::",
            stringify!(_prefixes_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_nlris>())).prefixes_cnt as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_nlris),
            "::",
            stringify!(prefixes_cnt)
        )
    );
}
pub type parsebgp_bgp_update_nlris_t = parsebgp_bgp_update_nlris;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_update {
    pub withdrawn_nlris: parsebgp_bgp_update_nlris_t,
    pub path_attrs: parsebgp_bgp_update_path_attrs_t,
    pub announced_nlris: parsebgp_bgp_update_nlris_t,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update>(),
        600usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update>())).withdrawn_nlris as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update),
            "::",
            stringify!(withdrawn_nlris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_update>())).path_attrs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update),
            "::",
            stringify!(path_attrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update>())).announced_nlris as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update),
            "::",
            stringify!(announced_nlris)
        )
    );
}
pub type parsebgp_bgp_update_t = parsebgp_bgp_update;
pub const parsebgp_error_PARSEBGP_OK: parsebgp_error = 0;
pub const parsebgp_error_PARSEBGP_PARTIAL_MSG: parsebgp_error = -1;
pub const parsebgp_error_PARSEBGP_INVALID_MSG: parsebgp_error = -2;
pub const parsebgp_error_PARSEBGP_NOT_IMPLEMENTED: parsebgp_error = -3;
pub const parsebgp_error_PARSEBGP_MALLOC_FAILURE: parsebgp_error = -4;
pub const parsebgp_error_PARSEBGP_TRUNCATED_MSG: parsebgp_error = -5;
pub const parsebgp_error_PARSEBGP_N_ERR: parsebgp_error = -6;
pub type parsebgp_error = ::std::os::raw::c_int;
pub use self::parsebgp_error as parsebgp_error_t;
extern "C" {
    pub fn parsebgp_strerror(err: parsebgp_error_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_opts {
    pub marker_omitted: ::std::os::raw::c_int,
    pub marker_copy: ::std::os::raw::c_int,
    pub asn_4_byte: ::std::os::raw::c_int,
    pub mp_reach_no_afi_safi_reserved: ::std::os::raw::c_int,
    pub afi: u16,
    pub safi: u8,
    pub path_attr_filter_enabled: ::std::os::raw::c_int,
    pub path_attr_filter: [u8; 255usize],
    pub path_attr_raw_enabled: ::std::os::raw::c_int,
    pub path_attr_raw: [u8; 255usize],
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_opts() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_opts>(),
        540usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_opts))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).marker_omitted as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(marker_omitted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).marker_copy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(marker_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).asn_4_byte as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(asn_4_byte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).mp_reach_no_afi_safi_reserved as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(mp_reach_no_afi_safi_reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).afi as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).safi as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).path_attr_filter_enabled as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(path_attr_filter_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).path_attr_filter as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(path_attr_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).path_attr_raw_enabled as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(path_attr_raw_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).path_attr_raw as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(path_attr_raw)
        )
    );
}
pub type parsebgp_bgp_opts_t = parsebgp_bgp_opts;
extern "C" {
    pub fn parsebgp_bgp_opts_init(opts: *mut parsebgp_bgp_opts_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_opts {
    pub peer_ip_afi: parsebgp_bgp_afi_t,
    pub parse_headers_only: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_opts() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_opts>(),
        8usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_opts>())).peer_ip_afi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_opts),
            "::",
            stringify!(peer_ip_afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_opts>())).parse_headers_only as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_opts),
            "::",
            stringify!(parse_headers_only)
        )
    );
}
pub type parsebgp_bmp_opts_t = parsebgp_bmp_opts;
extern "C" {
    pub fn parsebgp_bmp_opts_init(opts: *mut parsebgp_bmp_opts_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_opts {
    pub ignore_not_implemented: ::std::os::raw::c_int,
    pub silence_not_implemented: ::std::os::raw::c_int,
    pub ignore_invalid: ::std::os::raw::c_int,
    pub silence_invalid: ::std::os::raw::c_int,
    pub bgp: parsebgp_bgp_opts_t,
    pub bmp: parsebgp_bmp_opts_t,
}
#[test]
fn bindgen_test_layout_parsebgp_opts() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_opts>(),
        564usize,
        concat!("Size of: ", stringify!(parsebgp_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(parsebgp_opts))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_opts>())).ignore_not_implemented as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(ignore_not_implemented)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_opts>())).silence_not_implemented as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(silence_not_implemented)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_opts>())).ignore_invalid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(ignore_invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_opts>())).silence_invalid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(silence_invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_opts>())).bgp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(bgp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_opts>())).bmp as *const _ as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(bmp)
        )
    );
}
pub type parsebgp_opts_t = parsebgp_opts;
extern "C" {
    pub fn parsebgp_opts_init(opts: *mut parsebgp_opts_t);
}
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const parsebgp_bgp_msg_type_t_PARSEBGP_BGP_TYPE_OPEN: parsebgp_bgp_msg_type_t = 1;
pub const parsebgp_bgp_msg_type_t_PARSEBGP_BGP_TYPE_UPDATE: parsebgp_bgp_msg_type_t = 2;
pub const parsebgp_bgp_msg_type_t_PARSEBGP_BGP_TYPE_NOTIFICATION: parsebgp_bgp_msg_type_t = 3;
pub const parsebgp_bgp_msg_type_t_PARSEBGP_BGP_TYPE_KEEPALIVE: parsebgp_bgp_msg_type_t = 4;
pub const parsebgp_bgp_msg_type_t_PARSEBGP_BGP_TYPE_ROUTE_REFRESH: parsebgp_bgp_msg_type_t = 5;
pub type parsebgp_bgp_msg_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_msg {
    pub marker: [u8; 16usize],
    pub len: u16,
    pub type_: u8,
    pub types: parsebgp_bgp_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_msg__bindgen_ty_1 {
    pub open: *mut parsebgp_bgp_open_t,
    pub update: *mut parsebgp_bgp_update_t,
    pub notification: *mut parsebgp_bgp_notification_t,
    pub route_refresh: *mut parsebgp_bgp_route_refresh_t,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_msg__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_msg__bindgen_ty_1>())).open as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg__bindgen_ty_1),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_msg__bindgen_ty_1>())).update as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg__bindgen_ty_1),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_msg__bindgen_ty_1>())).notification as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg__bindgen_ty_1),
            "::",
            stringify!(notification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_msg__bindgen_ty_1>())).route_refresh as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg__bindgen_ty_1),
            "::",
            stringify!(route_refresh)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_msg>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_msg>())).marker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_msg>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_msg>())).type_ as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_msg>())).types as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_bgp_msg_t = parsebgp_bgp_msg;
extern "C" {
    pub fn parsebgp_bgp_decode(
        opts: *mut parsebgp_opts_t,
        msg: *mut parsebgp_bgp_msg_t,
        buffer: *const u8,
        len: *mut size_t,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_bgp_decode_ext(
        opts: *mut parsebgp_opts_t,
        msg: *mut parsebgp_bgp_msg_t,
        buffer: *const u8,
        len: *mut size_t,
        allow_truncation: ::std::os::raw::c_int,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_bgp_destroy_msg(msg: *mut parsebgp_bgp_msg_t);
}
extern "C" {
    pub fn parsebgp_bgp_clear_msg(msg: *mut parsebgp_bgp_msg_t);
}
extern "C" {
    pub fn parsebgp_bgp_dump_msg(msg: *const parsebgp_bgp_msg_t, depth: ::std::os::raw::c_int);
}
pub const parsebgp_bmp_info_tlv_type_PARSEBGP_BMP_INFO_TLV_TYPE_STRING: parsebgp_bmp_info_tlv_type =
    0;
pub const parsebgp_bmp_info_tlv_type_PARSEBGP_BMP_INFO_TLV_TYPE_SYSDESCR:
    parsebgp_bmp_info_tlv_type = 1;
pub const parsebgp_bmp_info_tlv_type_PARSEBGP_BMP_INFO_TLV_TYPE_SYSNAME:
    parsebgp_bmp_info_tlv_type = 2;
pub type parsebgp_bmp_info_tlv_type = ::std::os::raw::c_uint;
pub use self::parsebgp_bmp_info_tlv_type as parsebgp_bmp_info_tlv_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_info_tlv {
    pub type_: u16,
    pub len: u16,
    pub info: *mut u8,
    pub _info_alloc_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_info_tlv() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_info_tlv>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_info_tlv))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_info_tlv>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_info_tlv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_info_tlv>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_info_tlv),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_info_tlv>())).len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_info_tlv),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_info_tlv>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_info_tlv),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_info_tlv>()))._info_alloc_len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_info_tlv),
            "::",
            stringify!(_info_alloc_len)
        )
    );
}
pub type parsebgp_bmp_info_tlv_t = parsebgp_bmp_info_tlv;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_PREFIX_REJECTS:
    parsebgp_bmp_stat_counter_type = 0;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_PREFIX_DUPS:
    parsebgp_bmp_stat_counter_type = 1;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_WITHDRAW_DUP:
    parsebgp_bmp_stat_counter_type = 2;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_INVALID_CLUSTER_LIST:
    parsebgp_bmp_stat_counter_type = 3;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_INVALID_AS_PATH_LOOP:
    parsebgp_bmp_stat_counter_type = 4;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_INVALID_ORIGINATOR_ID:
    parsebgp_bmp_stat_counter_type = 5;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_INVALID_AS_CONFED_LOOP:
    parsebgp_bmp_stat_counter_type = 6;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_ROUTES_ADJ_RIB_IN:
    parsebgp_bmp_stat_counter_type = 7;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_ROUTES_LOC_RIB:
    parsebgp_bmp_stat_counter_type = 8;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_ROUTES_PER_AFI_SAFI_ADJ_RIB_IN:
    parsebgp_bmp_stat_counter_type = 9;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_ROUTES_PER_AFI_SAFI_LOC_RIB:
    parsebgp_bmp_stat_counter_type = 10;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_UPD_TREAT_AS_WITHDRAW:
    parsebgp_bmp_stat_counter_type = 11;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_PREFIX_TREAT_AS_WITHDRAW:
    parsebgp_bmp_stat_counter_type = 12;
pub const parsebgp_bmp_stat_counter_type_PARSEBGP_BMP_STATS_DUP_UPD:
    parsebgp_bmp_stat_counter_type = 13;
pub type parsebgp_bmp_stat_counter_type = ::std::os::raw::c_uint;
pub use self::parsebgp_bmp_stat_counter_type as parsebgp_bmp_stat_counter_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_stats_counter_afi_safi_gauge {
    pub afi: u16,
    pub safi: u8,
    pub gauge_u64: u64,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_stats_counter_afi_safi_gauge() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_stats_counter_afi_safi_gauge>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_stats_counter_afi_safi_gauge>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_counter_afi_safi_gauge>())).afi as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_counter_afi_safi_gauge>())).safi as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_counter_afi_safi_gauge>())).gauge_u64
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge),
            "::",
            stringify!(gauge_u64)
        )
    );
}
pub type parsebgp_bmp_stats_counter_afi_safi_gauge_t = parsebgp_bmp_stats_counter_afi_safi_gauge;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct stat_counter {
    pub type_: u16,
    pub len: u16,
    pub data: stat_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union stat_counter__bindgen_ty_1 {
    pub counter_u32: u32,
    pub gauge_u64: u64,
    pub afi_safi_gauge: parsebgp_bmp_stats_counter_afi_safi_gauge_t,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_stat_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<stat_counter__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(stat_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<stat_counter__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(stat_counter__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat_counter__bindgen_ty_1>())).counter_u32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter__bindgen_ty_1),
            "::",
            stringify!(counter_u32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat_counter__bindgen_ty_1>())).gauge_u64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter__bindgen_ty_1),
            "::",
            stringify!(gauge_u64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat_counter__bindgen_ty_1>())).afi_safi_gauge as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter__bindgen_ty_1),
            "::",
            stringify!(afi_safi_gauge)
        )
    );
}
#[test]
fn bindgen_test_layout_stat_counter() {
    assert_eq!(
        ::std::mem::size_of::<stat_counter>(),
        24usize,
        concat!("Size of: ", stringify!(stat_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<stat_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(stat_counter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat_counter>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat_counter>())).len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat_counter>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_bmp_stats_counter_t = stat_counter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_stats_report {
    pub stats_count: u32,
    pub counters: *mut parsebgp_bmp_stats_counter_t,
    pub _counters_alloc_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_stats_report() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_stats_report>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_stats_report))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_stats_report>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_stats_report))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_report>())).stats_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_report),
            "::",
            stringify!(stats_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_report>())).counters as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_report),
            "::",
            stringify!(counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_report>()))._counters_alloc_cnt as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_report),
            "::",
            stringify!(_counters_alloc_cnt)
        )
    );
}
pub type parsebgp_bmp_stats_report_t = parsebgp_bmp_stats_report;
pub const parsebgp_bmp_peer_down_reason_t_PARSEBGP_BMP_PEER_DOWN_LOCAL_CLOSE_WITH_NOTIF:
    parsebgp_bmp_peer_down_reason_t = 1;
pub const parsebgp_bmp_peer_down_reason_t_PARSEBGP_BMP_PEER_DOWN_LOCAL_CLOSE:
    parsebgp_bmp_peer_down_reason_t = 2;
pub const parsebgp_bmp_peer_down_reason_t_PARSEBGP_BMP_PEER_DOWN_REMOTE_CLOSE_WITH_NOTIF:
    parsebgp_bmp_peer_down_reason_t = 3;
pub const parsebgp_bmp_peer_down_reason_t_PARSEBGP_BMP_PEER_DOWN_REMOTE_CLOSE:
    parsebgp_bmp_peer_down_reason_t = 4;
pub const parsebgp_bmp_peer_down_reason_t_PARSEBGP_BMP_PEER_DOWN_CONFIG:
    parsebgp_bmp_peer_down_reason_t = 5;
pub type parsebgp_bmp_peer_down_reason_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_peer_down {
    pub reason: u8,
    pub data: parsebgp_bmp_peer_down__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_peer_down__bindgen_ty_1 {
    pub fsm_code: u16,
    pub notification: *mut parsebgp_bgp_msg_t,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_peer_down__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_peer_down__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bmp_peer_down__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_peer_down__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bmp_peer_down__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_down__bindgen_ty_1>())).fsm_code as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_down__bindgen_ty_1),
            "::",
            stringify!(fsm_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_down__bindgen_ty_1>())).notification
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_down__bindgen_ty_1),
            "::",
            stringify!(notification)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_peer_down() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_peer_down>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_peer_down))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_peer_down>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_peer_down))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_down>())).reason as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_down),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_down>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_down),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_bmp_peer_down_t = parsebgp_bmp_peer_down;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_peer_up {
    pub local_ip: [u8; 16usize],
    pub local_ip_afi: parsebgp_bgp_afi_t,
    pub local_port: u16,
    pub remote_port: u16,
    pub sent_open: *mut parsebgp_bgp_msg_t,
    pub recv_open: *mut parsebgp_bgp_msg_t,
    pub tlvs: *mut parsebgp_bmp_info_tlv_t,
    pub _tlvs_alloc_cnt: ::std::os::raw::c_int,
    pub tlvs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_peer_up() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_peer_up>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_peer_up))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_peer_up>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_peer_up))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).local_ip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(local_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).local_ip_afi as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(local_ip_afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).local_port as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(local_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).remote_port as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(remote_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).sent_open as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(sent_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).recv_open as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(recv_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).tlvs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(tlvs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_up>()))._tlvs_alloc_cnt as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(_tlvs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).tlvs_cnt as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(tlvs_cnt)
        )
    );
}
pub type parsebgp_bmp_peer_up_t = parsebgp_bmp_peer_up;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_init_msg {
    pub tlvs: *mut parsebgp_bmp_info_tlv_t,
    pub _tlvs_alloc_cnt: ::std::os::raw::c_int,
    pub tlvs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_init_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_init_msg>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_init_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_init_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_init_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_init_msg>())).tlvs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_init_msg),
            "::",
            stringify!(tlvs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_init_msg>()))._tlvs_alloc_cnt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_init_msg),
            "::",
            stringify!(_tlvs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_init_msg>())).tlvs_cnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_init_msg),
            "::",
            stringify!(tlvs_cnt)
        )
    );
}
pub type parsebgp_bmp_init_msg_t = parsebgp_bmp_init_msg;
pub const parsebgp_bmp_term_reason_t_PARSEBGP_BMP_TERM_REASON_ADMIN_CLOSE:
    parsebgp_bmp_term_reason_t = 0;
pub const parsebgp_bmp_term_reason_t_PARSEBGP_BMP_TERM_REASON_UNSPEC: parsebgp_bmp_term_reason_t =
    1;
pub const parsebgp_bmp_term_reason_t_PARSEBGP_BMP_TERM_REASON_RESOURCES:
    parsebgp_bmp_term_reason_t = 2;
pub const parsebgp_bmp_term_reason_t_PARSEBGP_BMP_TERM_REASON_REDUNDANT_CONN:
    parsebgp_bmp_term_reason_t = 3;
pub const parsebgp_bmp_term_reason_t_PARSEBGP_BMP_TERM_REASON_ADMIN_CLOSE_PERM:
    parsebgp_bmp_term_reason_t = 4;
pub type parsebgp_bmp_term_reason_t = ::std::os::raw::c_uint;
pub const parsebgp_bmp_term_info_type_t_PARSEBGP_BMP_TERM_INFO_TYPE_STRING:
    parsebgp_bmp_term_info_type_t = 0;
pub const parsebgp_bmp_term_info_type_t_PARSEBGP_BMP_TERM_INFO_TYPE_REASON:
    parsebgp_bmp_term_info_type_t = 1;
pub type parsebgp_bmp_term_info_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_term_tlv {
    pub type_: u16,
    pub len: u16,
    pub info: parsebgp_bmp_term_tlv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_term_tlv__bindgen_ty_1 {
    pub string: *mut ::std::os::raw::c_char,
    pub _string_alloc_len: ::std::os::raw::c_int,
    pub reason: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_term_tlv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_term_tlv__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_term_tlv__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_term_tlv__bindgen_ty_1>())).string as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_term_tlv__bindgen_ty_1>()))._string_alloc_len
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1),
            "::",
            stringify!(_string_alloc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_term_tlv__bindgen_ty_1>())).reason as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1),
            "::",
            stringify!(reason)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_term_tlv() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_term_tlv>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_term_tlv))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_term_tlv>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_term_tlv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_tlv>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_tlv>())).len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_tlv>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv),
            "::",
            stringify!(info)
        )
    );
}
pub type parsebgp_bmp_term_tlv_t = parsebgp_bmp_term_tlv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_term_msg {
    pub tlvs: *mut parsebgp_bmp_term_tlv_t,
    pub _tlvs_alloc_cnt: ::std::os::raw::c_int,
    pub tlvs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_term_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_term_msg>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_term_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_term_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_term_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_msg>())).tlvs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_msg),
            "::",
            stringify!(tlvs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_term_msg>()))._tlvs_alloc_cnt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_msg),
            "::",
            stringify!(_tlvs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_msg>())).tlvs_cnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_msg),
            "::",
            stringify!(tlvs_cnt)
        )
    );
}
pub type parsebgp_bmp_term_msg_t = parsebgp_bmp_term_msg;
pub const parsebgp_bmp_route_mirror_type_t_PARSEBGP_BMP_ROUTE_MIRROR_TYPE_BGP_MSG:
    parsebgp_bmp_route_mirror_type_t = 0;
pub const parsebgp_bmp_route_mirror_type_t_PARSEBGP_BMP_ROUTE_MIRROR_TYPE_INFO:
    parsebgp_bmp_route_mirror_type_t = 1;
pub type parsebgp_bmp_route_mirror_type_t = ::std::os::raw::c_uint;
pub const parsebgp_bmp_route_mirror_info_code_t_PARSEBGP_BMP_ROUTE_MIRROR_INFO_ERROR_PDU:
    parsebgp_bmp_route_mirror_info_code_t = 0;
pub const parsebgp_bmp_route_mirror_info_code_t_PARSEBGP_BMP_ROUTE_MIRROR_INFO_MSG_LOST:
    parsebgp_bmp_route_mirror_info_code_t = 1;
pub type parsebgp_bmp_route_mirror_info_code_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_route_mirror_tlv {
    pub type_: u16,
    pub len: u16,
    pub values: parsebgp_bmp_route_mirror_tlv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_route_mirror_tlv__bindgen_ty_1 {
    pub bgp_msg: *mut parsebgp_bgp_msg_t,
    pub code: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_route_mirror_tlv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_route_mirror_tlv__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bmp_route_mirror_tlv__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_route_mirror_tlv__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bmp_route_mirror_tlv__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv__bindgen_ty_1>())).bgp_msg
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv__bindgen_ty_1),
            "::",
            stringify!(bgp_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv__bindgen_ty_1>())).code as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv__bindgen_ty_1),
            "::",
            stringify!(code)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_route_mirror_tlv() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_route_mirror_tlv>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_route_mirror_tlv))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_route_mirror_tlv>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_route_mirror_tlv))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv>())).len as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv>())).values as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv),
            "::",
            stringify!(values)
        )
    );
}
pub type parsebgp_bmp_route_mirror_tlv_t = parsebgp_bmp_route_mirror_tlv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_route_mirror {
    pub tlvs: *mut parsebgp_bmp_route_mirror_tlv_t,
    pub _tlvs_alloc_cnt: ::std::os::raw::c_int,
    pub tlvs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_route_mirror() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_route_mirror>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_route_mirror))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_route_mirror>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_route_mirror))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_route_mirror>())).tlvs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror),
            "::",
            stringify!(tlvs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror>()))._tlvs_alloc_cnt as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror),
            "::",
            stringify!(_tlvs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror>())).tlvs_cnt as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror),
            "::",
            stringify!(tlvs_cnt)
        )
    );
}
pub type parsebgp_bmp_route_mirror_t = parsebgp_bmp_route_mirror;
pub const parsebgp_bmp_peer_flag_PARSEBGP_BMP_PEER_FLAG_IPV6: parsebgp_bmp_peer_flag = 128;
pub const parsebgp_bmp_peer_flag_PARSEBGP_BMP_PEER_FLAG_POST_POLICY: parsebgp_bmp_peer_flag = 64;
pub const parsebgp_bmp_peer_flag_PARSEBGP_BMP_PEER_FLAG_2_BYTE_AS_PATH: parsebgp_bmp_peer_flag = 32;
pub type parsebgp_bmp_peer_flag = ::std::os::raw::c_uint;
pub use self::parsebgp_bmp_peer_flag as parsebgp_bmp_peer_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_peer_hdr {
    pub type_: u8,
    pub flags: u8,
    pub dist_id: u64,
    pub addr: [u8; 16usize],
    pub afi: parsebgp_bgp_afi_t,
    pub asn: u32,
    pub bgp_id: [u8; 4usize],
    pub ts_sec: u32,
    pub ts_usec: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_peer_hdr() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_peer_hdr>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_peer_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_peer_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_peer_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).dist_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(dist_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).afi as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).asn as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).bgp_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(bgp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).ts_sec as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(ts_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).ts_usec as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(ts_usec)
        )
    );
}
pub type parsebgp_bmp_peer_hdr_t = parsebgp_bmp_peer_hdr;
pub const parsebgp_bmp_msg_type_PARSEBGP_BMP_TYPE_ROUTE_MON: parsebgp_bmp_msg_type = 0;
pub const parsebgp_bmp_msg_type_PARSEBGP_BMP_TYPE_STATS_REPORT: parsebgp_bmp_msg_type = 1;
pub const parsebgp_bmp_msg_type_PARSEBGP_BMP_TYPE_PEER_DOWN: parsebgp_bmp_msg_type = 2;
pub const parsebgp_bmp_msg_type_PARSEBGP_BMP_TYPE_PEER_UP: parsebgp_bmp_msg_type = 3;
pub const parsebgp_bmp_msg_type_PARSEBGP_BMP_TYPE_INIT_MSG: parsebgp_bmp_msg_type = 4;
pub const parsebgp_bmp_msg_type_PARSEBGP_BMP_TYPE_TERM_MSG: parsebgp_bmp_msg_type = 5;
pub const parsebgp_bmp_msg_type_PARSEBGP_BMP_TYPE_ROUTE_MIRROR_MSG: parsebgp_bmp_msg_type = 6;
pub type parsebgp_bmp_msg_type = ::std::os::raw::c_uint;
pub use self::parsebgp_bmp_msg_type as parsebgp_bmp_msg_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_msg {
    pub version: u8,
    pub len: u32,
    pub type_: u8,
    pub peer_hdr: parsebgp_bmp_peer_hdr_t,
    pub types_valid: ::std::os::raw::c_int,
    pub types: parsebgp_bmp_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_msg__bindgen_ty_1 {
    pub route_mon: *mut parsebgp_bgp_msg_t,
    pub stats_report: *mut parsebgp_bmp_stats_report_t,
    pub peer_down: *mut parsebgp_bmp_peer_down_t,
    pub peer_up: *mut parsebgp_bmp_peer_up_t,
    pub init_msg: *mut parsebgp_bmp_init_msg_t,
    pub term_msg: *mut parsebgp_bmp_term_msg_t,
    pub route_mirror: *mut parsebgp_bmp_route_mirror_t,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_msg__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).route_mon as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(route_mon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).stats_report as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(stats_report)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).peer_down as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(peer_down)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).peer_up as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(peer_up)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).init_msg as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(init_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).term_msg as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(term_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).route_mirror as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(route_mirror)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_msg>(),
        136usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).peer_hdr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(peer_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).types_valid as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(types_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).types as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_bmp_msg_t = parsebgp_bmp_msg;
extern "C" {
    pub fn parsebgp_bmp_decode(
        opts: *mut parsebgp_opts_t,
        msg: *mut parsebgp_bmp_msg_t,
        buffer: *const u8,
        len: *mut size_t,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_bmp_destroy_msg(msg: *mut parsebgp_bmp_msg_t);
}
extern "C" {
    pub fn parsebgp_bmp_clear_msg(msg: *mut parsebgp_bmp_msg_t);
}
extern "C" {
    pub fn parsebgp_bmp_dump_msg(msg: *const parsebgp_bmp_msg_t, depth: ::std::os::raw::c_int);
}
pub const parsebgp_mrt_asn_type_t_PARSEBGP_MRT_ASN_2_BYTE: parsebgp_mrt_asn_type_t = 0;
pub const parsebgp_mrt_asn_type_t_PARSEBGP_MRT_ASN_4_BYTE: parsebgp_mrt_asn_type_t = 1;
pub type parsebgp_mrt_asn_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_mrt_table_dump {
    pub view_number: u16,
    pub sequence: u16,
    pub prefix: [u8; 16usize],
    pub prefix_len: u8,
    pub status: u8,
    pub originated_time: u32,
    pub peer_ip: [u8; 16usize],
    pub peer_asn: u16,
    pub path_attrs: parsebgp_bgp_update_path_attrs_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump>(),
        600usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_table_dump))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_table_dump))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).view_number as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(view_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).sequence as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).prefix as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).prefix_len as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(prefix_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).status as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).originated_time as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(originated_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).peer_ip as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(peer_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).peer_asn as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(peer_asn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).path_attrs as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(path_attrs)
        )
    );
}
pub type parsebgp_mrt_table_dump_t = parsebgp_mrt_table_dump;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2_peer_entry {
    pub asn_type: parsebgp_mrt_asn_type_t,
    pub ip_afi: parsebgp_bgp_afi_t,
    pub bgp_id: [u8; 4usize],
    pub ip: [u8; 16usize],
    pub asn: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2_peer_entry() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2_peer_entry>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2_peer_entry>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).asn_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(asn_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).ip_afi as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(ip_afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).bgp_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(bgp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).ip as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).asn as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(asn)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_peer_entry_t = parsebgp_mrt_table_dump_v2_peer_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2_peer_index {
    pub collector_bgp_id: [u8; 4usize],
    pub view_name_len: u16,
    pub view_name: *mut ::std::os::raw::c_char,
    pub _view_name_alloc_len: u16,
    pub peer_count: u16,
    pub peer_entries: *mut parsebgp_mrt_table_dump_v2_peer_entry_t,
    pub _peer_entries_alloc_cnt: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2_peer_index() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2_peer_index>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2_peer_index>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).collector_bgp_id
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(collector_bgp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).view_name_len
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(view_name_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).view_name as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(view_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>()))._view_name_alloc_len
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(_view_name_alloc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).peer_count as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(peer_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).peer_entries
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(peer_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>()))
                ._peer_entries_alloc_cnt as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(_peer_entries_alloc_cnt)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_peer_index_t = parsebgp_mrt_table_dump_v2_peer_index;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2_rib_entry {
    pub peer_index: u16,
    pub originated_time: u32,
    pub path_attrs: parsebgp_bgp_update_path_attrs_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2_rib_entry() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2_rib_entry>(),
        560usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2_rib_entry>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_rib_entry>())).peer_index as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry),
            "::",
            stringify!(peer_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_rib_entry>())).originated_time
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry),
            "::",
            stringify!(originated_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_rib_entry>())).path_attrs as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry),
            "::",
            stringify!(path_attrs)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_rib_entry_t = parsebgp_mrt_table_dump_v2_rib_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2_afi_safi_rib {
    pub sequence: u32,
    pub prefix_len: u8,
    pub prefix: [u8; 16usize],
    pub entry_count: u16,
    pub entries: *mut parsebgp_mrt_table_dump_v2_rib_entry_t,
    pub _entries_alloc_cnt: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2_afi_safi_rib() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2_afi_safi_rib>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2_afi_safi_rib>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).sequence as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).prefix_len
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(prefix_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).prefix as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).entry_count
                as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(entry_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).entries as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>()))._entries_alloc_cnt
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(_entries_alloc_cnt)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_afi_safi_rib_t = parsebgp_mrt_table_dump_v2_afi_safi_rib;
pub const parsebgp_mrt_table_dump_v2_subtype_PARSEBGP_MRT_TABLE_DUMP_V2_PEER_INDEX_TABLE:
    parsebgp_mrt_table_dump_v2_subtype = 1;
pub const parsebgp_mrt_table_dump_v2_subtype_PARSEBGP_MRT_TABLE_DUMP_V2_RIB_IPV4_UNICAST:
    parsebgp_mrt_table_dump_v2_subtype = 2;
pub const parsebgp_mrt_table_dump_v2_subtype_PARSEBGP_MRT_TABLE_DUMP_V2_RIB_IPV4_MULTICAST:
    parsebgp_mrt_table_dump_v2_subtype = 3;
pub const parsebgp_mrt_table_dump_v2_subtype_PARSEBGP_MRT_TABLE_DUMP_V2_RIB_IPV6_UNICAST:
    parsebgp_mrt_table_dump_v2_subtype = 4;
pub const parsebgp_mrt_table_dump_v2_subtype_PARSEBGP_MRT_TABLE_DUMP_V2_RIB_IPV6_MULTICAST:
    parsebgp_mrt_table_dump_v2_subtype = 5;
pub const parsebgp_mrt_table_dump_v2_subtype_PARSEBGP_MRT_TABLE_DUMP_V2_RIB_GENERIC:
    parsebgp_mrt_table_dump_v2_subtype = 6;
pub type parsebgp_mrt_table_dump_v2_subtype = ::std::os::raw::c_uint;
pub use self::parsebgp_mrt_table_dump_v2_subtype as parsebgp_mrt_table_dump_v2_subtype_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2 {
    pub peer_index: parsebgp_mrt_table_dump_v2_peer_index_t,
    pub afi_safi_rib: parsebgp_mrt_table_dump_v2_afi_safi_rib_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2>(),
        80usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_table_dump_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_table_dump_v2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2>())).peer_index as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2),
            "::",
            stringify!(peer_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2>())).afi_safi_rib as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2),
            "::",
            stringify!(afi_safi_rib)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_t = parsebgp_mrt_table_dump_v2;
pub const parsebgp_mrt_fsm_code_t_PARSEBGP_MRT_FSM_CODE_IDLE: parsebgp_mrt_fsm_code_t = 1;
pub const parsebgp_mrt_fsm_code_t_PARSEBGP_MRT_FSM_CODE_CONNECT: parsebgp_mrt_fsm_code_t = 2;
pub const parsebgp_mrt_fsm_code_t_PARSEBGP_MRT_FSM_CODE_ACTIVE: parsebgp_mrt_fsm_code_t = 3;
pub const parsebgp_mrt_fsm_code_t_PARSEBGP_MRT_FSM_CODE_OPENSENT: parsebgp_mrt_fsm_code_t = 4;
pub const parsebgp_mrt_fsm_code_t_PARSEBGP_MRT_FSM_CODE_OPENCONFIRM: parsebgp_mrt_fsm_code_t = 5;
pub const parsebgp_mrt_fsm_code_t_PARSEBGP_MRT_FSM_CODE_ESTABLISHED: parsebgp_mrt_fsm_code_t = 6;
pub type parsebgp_mrt_fsm_code_t = ::std::os::raw::c_uint;
pub const parsebgp_mrt_bgp_subtype_t_PARSEBGP_MRT_BGP_MESSAGE_NULL: parsebgp_mrt_bgp_subtype_t = 0;
pub const parsebgp_mrt_bgp_subtype_t_PARSEBGP_MRT_BGP_MESSAGE_UPDATE: parsebgp_mrt_bgp_subtype_t =
    1;
pub const parsebgp_mrt_bgp_subtype_t_PARSEBGP_MRT_BGP_MESSAGE_PREF_UPDATE:
    parsebgp_mrt_bgp_subtype_t = 2;
pub const parsebgp_mrt_bgp_subtype_t_PARSEBGP_MRT_BGP_MESSAGE_STATE_CHANGE:
    parsebgp_mrt_bgp_subtype_t = 3;
pub const parsebgp_mrt_bgp_subtype_t_PARSEBGP_MRT_BGP_MESSAGE_SYNC: parsebgp_mrt_bgp_subtype_t = 4;
pub const parsebgp_mrt_bgp_subtype_t_PARSEBGP_MRT_BGP_MESSAGE_OPEN: parsebgp_mrt_bgp_subtype_t = 5;
pub const parsebgp_mrt_bgp_subtype_t_PARSEBGP_MRT_BGP_MESSAGE_NOTIFY: parsebgp_mrt_bgp_subtype_t =
    6;
pub const parsebgp_mrt_bgp_subtype_t_PARSEBGP_MRT_BGP_MESSAGE_KEEPALIVE:
    parsebgp_mrt_bgp_subtype_t = 7;
pub type parsebgp_mrt_bgp_subtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp4mp_state_change {
    pub old_state: u16,
    pub new_state: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp4mp_state_change() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp4mp_state_change>(),
        4usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp4mp_state_change))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp4mp_state_change>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_bgp4mp_state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp_state_change>())).old_state as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp_state_change),
            "::",
            stringify!(old_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp_state_change>())).new_state as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp_state_change),
            "::",
            stringify!(new_state)
        )
    );
}
pub type parsebgp_mrt_bgp4mp_state_change_t = parsebgp_mrt_bgp4mp_state_change;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp {
    pub peer_asn: u16,
    pub peer_ip: [u8; 16usize],
    pub local_asn: u16,
    pub local_ip: [u8; 16usize],
    pub data: parsebgp_mrt_bgp__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp__bindgen_ty_1 {
    pub update: *mut parsebgp_bgp_update_t,
    pub state_change: parsebgp_mrt_bgp4mp_state_change_t,
    pub open: *mut parsebgp_bgp_open_t,
    pub notification: *mut parsebgp_bgp_notification_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_bgp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp__bindgen_ty_1>())).update as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp__bindgen_ty_1),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp__bindgen_ty_1>())).state_change as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp__bindgen_ty_1),
            "::",
            stringify!(state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp__bindgen_ty_1>())).open as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp__bindgen_ty_1),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp__bindgen_ty_1>())).notification as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp__bindgen_ty_1),
            "::",
            stringify!(notification)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp>(),
        72usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_bgp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).peer_asn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(peer_asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).peer_ip as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(peer_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).local_asn as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(local_asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).local_ip as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(local_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_mrt_bgp_t = parsebgp_mrt_bgp;
pub const parsebgp_mrt_bgp4mp_subtype_t_PARSEBGP_MRT_BGP4MP_STATE_CHANGE:
    parsebgp_mrt_bgp4mp_subtype_t = 0;
pub const parsebgp_mrt_bgp4mp_subtype_t_PARSEBGP_MRT_BGP4MP_MESSAGE: parsebgp_mrt_bgp4mp_subtype_t =
    1;
pub const parsebgp_mrt_bgp4mp_subtype_t_PARSEBGP_MRT_BGP4MP_MESSAGE_AS4:
    parsebgp_mrt_bgp4mp_subtype_t = 4;
pub const parsebgp_mrt_bgp4mp_subtype_t_PARSEBGP_MRT_BGP4MP_STATE_CHANGE_AS4:
    parsebgp_mrt_bgp4mp_subtype_t = 5;
pub const parsebgp_mrt_bgp4mp_subtype_t_PARSEBGP_MRT_BGP4MP_MESSAGE_LOCAL:
    parsebgp_mrt_bgp4mp_subtype_t = 6;
pub const parsebgp_mrt_bgp4mp_subtype_t_PARSEBGP_MRT_BGP4MP_MESSAGE_AS4_LOCAL:
    parsebgp_mrt_bgp4mp_subtype_t = 7;
pub type parsebgp_mrt_bgp4mp_subtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp4mp {
    pub peer_asn: u32,
    pub local_asn: u32,
    pub interface_index: u16,
    pub afi: u16,
    pub peer_ip: [u8; 16usize],
    pub local_ip: [u8; 16usize],
    pub data: parsebgp_mrt_bgp4mp__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp4mp__bindgen_ty_1 {
    pub state_change: parsebgp_mrt_bgp4mp_state_change_t,
    pub bgp_msg: *mut parsebgp_bgp_msg_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp4mp__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp4mp__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp4mp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp4mp__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_bgp4mp__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp__bindgen_ty_1>())).state_change as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp__bindgen_ty_1),
            "::",
            stringify!(state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp__bindgen_ty_1>())).bgp_msg as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp__bindgen_ty_1),
            "::",
            stringify!(bgp_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp4mp() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp4mp>(),
        64usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp4mp))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp4mp>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_bgp4mp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).peer_asn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(peer_asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).local_asn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(local_asn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).interface_index as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(interface_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).afi as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).peer_ip as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(peer_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).local_ip as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(local_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_mrt_bgp4mp_t = parsebgp_mrt_bgp4mp;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_BGP: parsebgp_mrt_msg_type_t = 5;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_OSPF_V2: parsebgp_mrt_msg_type_t = 11;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_TABLE_DUMP: parsebgp_mrt_msg_type_t = 12;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_TABLE_DUMP_V2: parsebgp_mrt_msg_type_t = 13;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_BGP4MP: parsebgp_mrt_msg_type_t = 16;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_BGP4MP_ET: parsebgp_mrt_msg_type_t = 17;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_ISIS: parsebgp_mrt_msg_type_t = 32;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_ISIS_ET: parsebgp_mrt_msg_type_t = 33;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_OSPF_V3: parsebgp_mrt_msg_type_t = 48;
pub const parsebgp_mrt_msg_type_t_PARSEBGP_MRT_TYPE_OSPF_V3_ET: parsebgp_mrt_msg_type_t = 49;
pub type parsebgp_mrt_msg_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_msg {
    pub timestamp_sec: u32,
    pub type_: u16,
    pub subtype: u16,
    pub len: u32,
    pub timestamp_usec: u32,
    pub types: parsebgp_mrt_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_msg__bindgen_ty_1 {
    pub bgp: *mut parsebgp_mrt_bgp_t,
    pub table_dump: *mut parsebgp_mrt_table_dump_t,
    pub table_dump_v2: *mut parsebgp_mrt_table_dump_v2_t,
    pub bgp4mp: *mut parsebgp_mrt_bgp4mp_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_msg__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_msg__bindgen_ty_1>())).bgp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg__bindgen_ty_1),
            "::",
            stringify!(bgp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_msg__bindgen_ty_1>())).table_dump as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg__bindgen_ty_1),
            "::",
            stringify!(table_dump)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_msg__bindgen_ty_1>())).table_dump_v2 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg__bindgen_ty_1),
            "::",
            stringify!(table_dump_v2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_msg__bindgen_ty_1>())).bgp4mp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg__bindgen_ty_1),
            "::",
            stringify!(bgp4mp)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_msg>(),
        48usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).timestamp_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(timestamp_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).subtype as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).timestamp_usec as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(timestamp_usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_mrt_msg_t = parsebgp_mrt_msg;
extern "C" {
    pub fn parsebgp_mrt_decode(
        opts: *mut parsebgp_opts_t,
        msg: *mut parsebgp_mrt_msg_t,
        buf: *const u8,
        len: *mut size_t,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_mrt_destroy_msg(msg: *mut parsebgp_mrt_msg_t);
}
extern "C" {
    pub fn parsebgp_mrt_clear_msg(msg: *mut parsebgp_mrt_msg_t);
}
extern "C" {
    pub fn parsebgp_mrt_dump_msg(msg: *const parsebgp_mrt_msg_t, depth: ::std::os::raw::c_int);
}
pub const parsebgp_msg_type_PARSEBGP_MSG_TYPE_INVALID: parsebgp_msg_type = 0;
pub const parsebgp_msg_type_PARSEBGP_MSG_TYPE_BGP: parsebgp_msg_type = 1;
pub const parsebgp_msg_type_PARSEBGP_MSG_TYPE_BMP: parsebgp_msg_type = 2;
pub const parsebgp_msg_type_PARSEBGP_MSG_TYPE_MRT: parsebgp_msg_type = 3;
pub type parsebgp_msg_type = ::std::os::raw::c_uint;
pub use self::parsebgp_msg_type as parsebgp_msg_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_msg {
    pub type_: parsebgp_msg_type_t,
    pub types: parsebgp_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_msg__bindgen_ty_1 {
    pub bgp: *mut parsebgp_bgp_msg_t,
    pub bmp: *mut parsebgp_bmp_msg_t,
    pub mrt: *mut parsebgp_mrt_msg_t,
}
#[test]
fn bindgen_test_layout_parsebgp_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_msg__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg__bindgen_ty_1>())).bgp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg__bindgen_ty_1),
            "::",
            stringify!(bgp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg__bindgen_ty_1>())).bmp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg__bindgen_ty_1),
            "::",
            stringify!(bmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg__bindgen_ty_1>())).mrt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg__bindgen_ty_1),
            "::",
            stringify!(mrt)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_msg>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg>())).types as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_msg_t = parsebgp_msg;
extern "C" {
    pub fn parsebgp_decode(
        opts: parsebgp_opts_t,
        type_: parsebgp_msg_type_t,
        msg: *mut parsebgp_msg_t,
        buffer: *const u8,
        len: *mut size_t,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_create_msg() -> *mut parsebgp_msg_t;
}
extern "C" {
    pub fn parsebgp_clear_msg(msg: *mut parsebgp_msg_t);
}
extern "C" {
    pub fn parsebgp_destroy_msg(msg: *mut parsebgp_msg_t);
}
extern "C" {
    pub fn parsebgp_dump_msg(msg: *const parsebgp_msg_t);
}
