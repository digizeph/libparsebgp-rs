/* automatically generated by rust-bindgen 0.55.1 */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_notification {
    pub code: u8,
    pub subcode: u8,
    pub data: *mut u8,
    pub _data_alloc_len: ::std::os::raw::c_int,
    pub data_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_notification() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_notification>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_notification))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_notification>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_notification))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_notification>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_notification>())).subcode as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(subcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_notification>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_notification>()))._data_alloc_len as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(_data_alloc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_notification>())).data_len as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_notification),
            "::",
            stringify!(data_len)
        )
    );
}
pub type parsebgp_bgp_notification_t = parsebgp_bgp_notification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_open_capability_mpbgp {
    pub afi: u16,
    pub reserved: u8,
    pub safi: u8,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_open_capability_mpbgp() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_open_capability_mpbgp>(),
        4usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_open_capability_mpbgp))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_open_capability_mpbgp>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_open_capability_mpbgp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability_mpbgp>())).afi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability_mpbgp),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability_mpbgp>())).reserved as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability_mpbgp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability_mpbgp>())).safi as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability_mpbgp),
            "::",
            stringify!(safi)
        )
    );
}
pub type parsebgp_bgp_open_capability_mpbgp_t = parsebgp_bgp_open_capability_mpbgp;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_open_capability {
    pub code: u8,
    pub len: u8,
    pub values: parsebgp_bgp_open_capability__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union parsebgp_bgp_open_capability__bindgen_ty_1 {
    pub mpbgp: parsebgp_bgp_open_capability_mpbgp_t,
    pub asn: u32,
    pub datap: *mut u8,
    pub databuf: [u8; 8usize],
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_open_capability__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_open_capability__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_open_capability__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability__bindgen_ty_1>())).mpbgp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1),
            "::",
            stringify!(mpbgp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability__bindgen_ty_1>())).asn as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1),
            "::",
            stringify!(asn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability__bindgen_ty_1>())).datap as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1),
            "::",
            stringify!(datap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability__bindgen_ty_1>())).databuf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability__bindgen_ty_1),
            "::",
            stringify!(databuf)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_open_capability() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_open_capability>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_open_capability))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_open_capability>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_open_capability))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability>())).code as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability>())).len as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open_capability>())).values as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open_capability),
            "::",
            stringify!(values)
        )
    );
}
pub type parsebgp_bgp_open_capability_t = parsebgp_bgp_open_capability;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_open {
    pub version: u8,
    pub asn: u16,
    pub hold_time: u16,
    pub bgp_id: [u8; 4usize],
    pub param_len: u8,
    pub capabilities: *mut parsebgp_bgp_open_capability_t,
    pub _capabilities_alloc_cnt: ::std::os::raw::c_int,
    pub capabilities_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_open() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_open>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_open))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_open>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_open))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).asn as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).hold_time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(hold_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).bgp_id as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(bgp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).param_len as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(param_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_open>())).capabilities as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open>()))._capabilities_alloc_cnt as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(_capabilities_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_open>())).capabilities_cnt as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_open),
            "::",
            stringify!(capabilities_cnt)
        )
    );
}
pub type parsebgp_bgp_open_t = parsebgp_bgp_open;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_route_refresh {
    pub afi: u16,
    pub subtype: u8,
    pub safi: u8,
    pub data: *mut u8,
    pub _data_alloc_len: ::std::os::raw::c_int,
    pub data_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_route_refresh() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_route_refresh>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_route_refresh))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_route_refresh>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_route_refresh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).afi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).subtype as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).safi as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>()))._data_alloc_len as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(_data_alloc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_route_refresh>())).data_len as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_route_refresh),
            "::",
            stringify!(data_len)
        )
    );
}
pub type parsebgp_bgp_route_refresh_t = parsebgp_bgp_route_refresh;
pub const parsebgp_bgp_afi_t_PARSEBGP_BGP_AFI_IPV4: parsebgp_bgp_afi_t = 1;
pub const parsebgp_bgp_afi_t_PARSEBGP_BGP_AFI_IPV6: parsebgp_bgp_afi_t = 2;
pub type parsebgp_bgp_afi_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_prefix {
    pub type_: u8,
    pub afi: u16,
    pub safi: u8,
    pub len: u8,
    pub addr: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_prefix() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_prefix>(),
        22usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_prefix))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_prefix>(),
        2usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_prefix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).afi as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).safi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).len as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_prefix>())).addr as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_prefix),
            "::",
            stringify!(addr)
        )
    );
}
pub type parsebgp_bgp_prefix_t = parsebgp_bgp_prefix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_ext_community_two_octet {
    pub global_admin: u16,
    pub local_admin: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community_two_octet() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community_two_octet>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_ext_community_two_octet)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community_two_octet>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community_two_octet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_two_octet>())).global_admin
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_two_octet),
            "::",
            stringify!(global_admin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_two_octet>())).local_admin
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_two_octet),
            "::",
            stringify!(local_admin)
        )
    );
}
pub type parsebgp_bgp_update_ext_community_two_octet_t =
    parsebgp_bgp_update_ext_community_two_octet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_ext_community_ip_addr {
    pub global_admin_ip_afi: u16,
    pub global_admin_ip: [u8; 16usize],
    pub local_admin: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community_ip_addr() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community_ip_addr>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community_ip_addr>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_ip_addr>()))
                .global_admin_ip_afi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr),
            "::",
            stringify!(global_admin_ip_afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_ip_addr>())).global_admin_ip
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr),
            "::",
            stringify!(global_admin_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_ip_addr>())).local_admin
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_ip_addr),
            "::",
            stringify!(local_admin)
        )
    );
}
pub type parsebgp_bgp_update_ext_community_ip_addr_t = parsebgp_bgp_update_ext_community_ip_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_ext_community_four_octet {
    pub global_admin: u32,
    pub local_admin: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community_four_octet() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community_four_octet>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_ext_community_four_octet)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community_four_octet>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community_four_octet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_four_octet>())).global_admin
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_four_octet),
            "::",
            stringify!(global_admin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community_four_octet>())).local_admin
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community_four_octet),
            "::",
            stringify!(local_admin)
        )
    );
}
pub type parsebgp_bgp_update_ext_community_four_octet_t =
    parsebgp_bgp_update_ext_community_four_octet;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_update_ext_community {
    pub type_: u8,
    pub subtype: u8,
    pub types: parsebgp_bgp_update_ext_community__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union parsebgp_bgp_update_ext_community__bindgen_ty_1 {
    pub two_octet: parsebgp_bgp_update_ext_community_two_octet_t,
    pub ip_addr: parsebgp_bgp_update_ext_community_ip_addr_t,
    pub four_octet: parsebgp_bgp_update_ext_community_four_octet_t,
    pub opaque: [u8; 6usize],
    pub unknown: [u8; 7usize],
    _bindgen_union_align: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community__bindgen_ty_1>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).two_octet
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(two_octet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).ip_addr
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(ip_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).four_octet
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(four_octet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).opaque
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community__bindgen_ty_1>())).unknown
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community__bindgen_ty_1),
            "::",
            stringify!(unknown)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_community() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_community>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_ext_community))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_community>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_community)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community>())).subtype as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_community>())).types as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_community),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_bgp_update_ext_community_t = parsebgp_bgp_update_ext_community;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_ext_communities {
    pub communities: *mut parsebgp_bgp_update_ext_community_t,
    pub _communities_alloc_cnt: ::std::os::raw::c_int,
    pub communities_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_ext_communities() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_ext_communities>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_ext_communities))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_ext_communities>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_ext_communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_communities>())).communities as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_communities),
            "::",
            stringify!(communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_communities>()))._communities_alloc_cnt
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_communities),
            "::",
            stringify!(_communities_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_ext_communities>())).communities_cnt
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_ext_communities),
            "::",
            stringify!(communities_cnt)
        )
    );
}
pub type parsebgp_bgp_update_ext_communities_t = parsebgp_bgp_update_ext_communities;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_mp_reach {
    pub afi: u16,
    pub safi: u8,
    pub next_hop_len: u8,
    pub next_hop: [u8; 16usize],
    pub next_hop_ll: [u8; 16usize],
    pub reserved: u8,
    pub nlris: *mut parsebgp_bgp_prefix_t,
    pub _nlris_alloc_cnt: ::std::os::raw::c_int,
    pub nlris_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_mp_reach() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_mp_reach>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_mp_reach))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_mp_reach>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_mp_reach))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).afi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).safi as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).next_hop_len as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(next_hop_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).next_hop as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(next_hop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).next_hop_ll as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(next_hop_ll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).reserved as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).nlris as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(nlris)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>()))._nlris_alloc_cnt as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(_nlris_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_reach>())).nlris_cnt as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_reach),
            "::",
            stringify!(nlris_cnt)
        )
    );
}
pub type parsebgp_bgp_update_mp_reach_t = parsebgp_bgp_update_mp_reach;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_mp_unreach {
    pub afi: u16,
    pub safi: u8,
    pub withdrawn_nlris: *mut parsebgp_bgp_prefix_t,
    pub _withdrawn_nlris_alloc_cnt: ::std::os::raw::c_int,
    pub withdrawn_nlris_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_mp_unreach() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_mp_unreach>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_mp_unreach))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_mp_unreach>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_mp_unreach))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>())).afi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>())).safi as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>())).withdrawn_nlris as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(withdrawn_nlris)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>()))._withdrawn_nlris_alloc_cnt
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(_withdrawn_nlris_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_mp_unreach>())).withdrawn_nlris_cnt
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_mp_unreach),
            "::",
            stringify!(withdrawn_nlris_cnt)
        )
    );
}
pub type parsebgp_bgp_update_mp_unreach_t = parsebgp_bgp_update_mp_unreach;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_as_path_seg {
    pub type_: u8,
    pub asns_cnt: u8,
    pub asns: *mut u32,
    pub _asns_alloc_cnt: u8,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_as_path_seg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_as_path_seg>(),
        11usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_as_path_seg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_as_path_seg>(),
        1usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_as_path_seg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path_seg>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path_seg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path_seg>())).asns_cnt as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path_seg),
            "::",
            stringify!(asns_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path_seg>())).asns as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path_seg),
            "::",
            stringify!(asns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path_seg>()))._asns_alloc_cnt as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path_seg),
            "::",
            stringify!(_asns_alloc_cnt)
        )
    );
}
pub type parsebgp_bgp_update_as_path_seg_t = parsebgp_bgp_update_as_path_seg;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_as_path {
    pub segs: *mut parsebgp_bgp_update_as_path_seg_t,
    pub _segs_alloc_cnt: u8,
    pub segs_cnt: u8,
    pub asns_cnt: u8,
    pub asn_4_byte: u8,
    pub raw: *mut u8,
    pub _raw_alloc_len: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_as_path() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_as_path>(),
        22usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_as_path))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_as_path>(),
        1usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_as_path))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).segs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(segs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>()))._segs_alloc_cnt as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(_segs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).segs_cnt as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(segs_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).asns_cnt as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(asns_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).asn_4_byte as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(asn_4_byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>())).raw as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_path>()))._raw_alloc_len as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_path),
            "::",
            stringify!(_raw_alloc_len)
        )
    );
}
pub type parsebgp_bgp_update_as_path_t = parsebgp_bgp_update_as_path;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_aggregator {
    pub asn: u32,
    pub addr: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_aggregator() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_aggregator>(),
        8usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_aggregator))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_aggregator>(),
        4usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_aggregator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_aggregator>())).asn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_aggregator),
            "::",
            stringify!(asn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_aggregator>())).addr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_aggregator),
            "::",
            stringify!(addr)
        )
    );
}
pub type parsebgp_bgp_update_aggregator_t = parsebgp_bgp_update_aggregator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_communities {
    pub communities: *mut u32,
    pub _communities_alloc_cnt: ::std::os::raw::c_int,
    pub communities_cnt: ::std::os::raw::c_int,
    pub raw: *mut u8,
    pub _raw_alloc_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_communities() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_communities>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_communities))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_communities>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_communities))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>())).communities as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>()))._communities_alloc_cnt
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(_communities_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>())).communities_cnt as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(communities_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>())).raw as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_communities>()))._raw_alloc_len as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_communities),
            "::",
            stringify!(_raw_alloc_len)
        )
    );
}
pub type parsebgp_bgp_update_communities_t = parsebgp_bgp_update_communities;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_cluster_list {
    pub cluster_ids: *mut u32,
    pub _cluster_ids_alloc_cnt: ::std::os::raw::c_int,
    pub cluster_ids_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_cluster_list() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_cluster_list>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_cluster_list))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_cluster_list>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_cluster_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_cluster_list>())).cluster_ids as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_cluster_list),
            "::",
            stringify!(cluster_ids)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_cluster_list>()))._cluster_ids_alloc_cnt
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_cluster_list),
            "::",
            stringify!(_cluster_ids_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_cluster_list>())).cluster_ids_cnt as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_cluster_list),
            "::",
            stringify!(cluster_ids_cnt)
        )
    );
}
pub type parsebgp_bgp_update_cluster_list_t = parsebgp_bgp_update_cluster_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_as_pathlimit {
    pub max_asns: u8,
    pub asn: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_as_pathlimit() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_as_pathlimit>(),
        8usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_as_pathlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_as_pathlimit>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_as_pathlimit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_pathlimit>())).max_asns as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_pathlimit),
            "::",
            stringify!(max_asns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_as_pathlimit>())).asn as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_as_pathlimit),
            "::",
            stringify!(asn)
        )
    );
}
pub type parsebgp_bgp_update_as_pathlimit_t = parsebgp_bgp_update_as_pathlimit;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_large_community {
    pub global_admin: u32,
    pub local_1: u32,
    pub local_2: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_large_community() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_large_community>(),
        12usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_large_community))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_large_community>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_large_community)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_community>())).global_admin as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_community),
            "::",
            stringify!(global_admin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_community>())).local_1 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_community),
            "::",
            stringify!(local_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_community>())).local_2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_community),
            "::",
            stringify!(local_2)
        )
    );
}
pub type parsebgp_bgp_update_large_community_t = parsebgp_bgp_update_large_community;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_large_communities {
    pub communities: *mut parsebgp_bgp_update_large_community_t,
    pub _communities_alloc_cnt: ::std::os::raw::c_int,
    pub communities_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_large_communities() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_large_communities>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_large_communities)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_large_communities>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_large_communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_communities>())).communities
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_communities),
            "::",
            stringify!(communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_communities>()))._communities_alloc_cnt
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_communities),
            "::",
            stringify!(_communities_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_large_communities>())).communities_cnt
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_large_communities),
            "::",
            stringify!(communities_cnt)
        )
    );
}
pub type parsebgp_bgp_update_large_communities_t = parsebgp_bgp_update_large_communities;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_update_path_attr {
    pub flags: u8,
    pub type_: u8,
    pub len: u16,
    pub data: parsebgp_bgp_update_path_attr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union parsebgp_bgp_update_path_attr__bindgen_ty_1 {
    pub origin: u8,
    pub as_path: *mut parsebgp_bgp_update_as_path_t,
    pub next_hop: [u8; 4usize],
    pub med: u32,
    pub local_pref: u32,
    pub aggregator: parsebgp_bgp_update_aggregator_t,
    pub communities: *mut parsebgp_bgp_update_communities_t,
    pub originator_id: u32,
    pub cluster_list: *mut parsebgp_bgp_update_cluster_list_t,
    pub mp_reach: *mut parsebgp_bgp_update_mp_reach_t,
    pub mp_unreach: *mut parsebgp_bgp_update_mp_unreach_t,
    pub ext_communities: *mut parsebgp_bgp_update_ext_communities_t,
    pub as_pathlimit: parsebgp_bgp_update_as_pathlimit_t,
    pub large_communities: *mut parsebgp_bgp_update_large_communities_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_path_attr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_path_attr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_path_attr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).origin
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).as_path
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(as_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).next_hop
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(next_hop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).med as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(med)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).local_pref
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(local_pref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).aggregator
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(aggregator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).communities
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).originator_id
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(originator_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).cluster_list
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(cluster_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).mp_reach
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(mp_reach)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).mp_unreach
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(mp_unreach)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).ext_communities
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(ext_communities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>())).as_pathlimit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(as_pathlimit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr__bindgen_ty_1>()))
                .large_communities as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr__bindgen_ty_1),
            "::",
            stringify!(large_communities)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_path_attr() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_path_attr>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_path_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_path_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_path_attr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr>())).type_ as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr>())).len as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attr>())).data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attr),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_bgp_update_path_attr_t = parsebgp_bgp_update_path_attr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_update_path_attrs {
    pub len: u16,
    pub attrs: [parsebgp_bgp_update_path_attr_t; 33usize],
    pub attrs_used: *mut u8,
    pub _attrs_used_alloc_cnt: ::std::os::raw::c_int,
    pub attrs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_path_attrs() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_path_attrs>(),
        552usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_path_attrs))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_path_attrs>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_path_attrs))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>())).attrs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>())).attrs_used as *const _
                as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(attrs_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>()))._attrs_used_alloc_cnt
                as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(_attrs_used_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_path_attrs>())).attrs_cnt as *const _
                as usize
        },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_path_attrs),
            "::",
            stringify!(attrs_cnt)
        )
    );
}
pub type parsebgp_bgp_update_path_attrs_t = parsebgp_bgp_update_path_attrs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_update_nlris {
    pub len: u16,
    pub prefixes: *mut parsebgp_bgp_prefix_t,
    pub _prefixes_alloc_cnt: ::std::os::raw::c_int,
    pub prefixes_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update_nlris() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update_nlris>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update_nlris))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update_nlris>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update_nlris))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_update_nlris>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_nlris),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_nlris>())).prefixes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_nlris),
            "::",
            stringify!(prefixes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_nlris>()))._prefixes_alloc_cnt as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_nlris),
            "::",
            stringify!(_prefixes_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update_nlris>())).prefixes_cnt as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update_nlris),
            "::",
            stringify!(prefixes_cnt)
        )
    );
}
pub type parsebgp_bgp_update_nlris_t = parsebgp_bgp_update_nlris;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_update {
    pub withdrawn_nlris: parsebgp_bgp_update_nlris_t,
    pub path_attrs: parsebgp_bgp_update_path_attrs_t,
    pub announced_nlris: parsebgp_bgp_update_nlris_t,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_update() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_update>(),
        600usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_update))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_update>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_update))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update>())).withdrawn_nlris as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update),
            "::",
            stringify!(withdrawn_nlris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_update>())).path_attrs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update),
            "::",
            stringify!(path_attrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_update>())).announced_nlris as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_update),
            "::",
            stringify!(announced_nlris)
        )
    );
}
pub type parsebgp_bgp_update_t = parsebgp_bgp_update;
pub const parsebgp_error_PARSEBGP_OK: parsebgp_error = 0;
pub const parsebgp_error_PARSEBGP_PARTIAL_MSG: parsebgp_error = -1;
pub const parsebgp_error_PARSEBGP_INVALID_MSG: parsebgp_error = -2;
pub const parsebgp_error_PARSEBGP_NOT_IMPLEMENTED: parsebgp_error = -3;
pub const parsebgp_error_PARSEBGP_MALLOC_FAILURE: parsebgp_error = -4;
pub const parsebgp_error_PARSEBGP_TRUNCATED_MSG: parsebgp_error = -5;
pub const parsebgp_error_PARSEBGP_N_ERR: parsebgp_error = -6;
pub type parsebgp_error = ::std::os::raw::c_int;
pub use self::parsebgp_error as parsebgp_error_t;
extern "C" {
    pub fn parsebgp_strerror(err: parsebgp_error_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_bgp_opts {
    pub marker_omitted: ::std::os::raw::c_int,
    pub marker_copy: ::std::os::raw::c_int,
    pub asn_4_byte: ::std::os::raw::c_int,
    pub mp_reach_no_afi_safi_reserved: ::std::os::raw::c_int,
    pub afi: u16,
    pub safi: u8,
    pub path_attr_filter_enabled: ::std::os::raw::c_int,
    pub path_attr_filter: [u8; 255usize],
    pub path_attr_raw_enabled: ::std::os::raw::c_int,
    pub path_attr_raw: [u8; 255usize],
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_opts() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_opts>(),
        540usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_opts))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).marker_omitted as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(marker_omitted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).marker_copy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(marker_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).asn_4_byte as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(asn_4_byte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).mp_reach_no_afi_safi_reserved as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(mp_reach_no_afi_safi_reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).afi as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).safi as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).path_attr_filter_enabled as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(path_attr_filter_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).path_attr_filter as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(path_attr_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_opts>())).path_attr_raw_enabled as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(path_attr_raw_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_opts>())).path_attr_raw as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_opts),
            "::",
            stringify!(path_attr_raw)
        )
    );
}
pub type parsebgp_bgp_opts_t = parsebgp_bgp_opts;
extern "C" {
    pub fn parsebgp_bgp_opts_init(opts: *mut parsebgp_bgp_opts_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_opts {
    pub peer_ip_afi: parsebgp_bgp_afi_t,
    pub parse_headers_only: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_opts() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_opts>(),
        8usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_opts>())).peer_ip_afi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_opts),
            "::",
            stringify!(peer_ip_afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_opts>())).parse_headers_only as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_opts),
            "::",
            stringify!(parse_headers_only)
        )
    );
}
pub type parsebgp_bmp_opts_t = parsebgp_bmp_opts;
extern "C" {
    pub fn parsebgp_bmp_opts_init(opts: *mut parsebgp_bmp_opts_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_opts {
    pub ignore_not_implemented: ::std::os::raw::c_int,
    pub silence_not_implemented: ::std::os::raw::c_int,
    pub ignore_invalid: ::std::os::raw::c_int,
    pub silence_invalid: ::std::os::raw::c_int,
    pub bgp: parsebgp_bgp_opts_t,
    pub bmp: parsebgp_bmp_opts_t,
}
#[test]
fn bindgen_test_layout_parsebgp_opts() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_opts>(),
        564usize,
        concat!("Size of: ", stringify!(parsebgp_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(parsebgp_opts))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_opts>())).ignore_not_implemented as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(ignore_not_implemented)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_opts>())).silence_not_implemented as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(silence_not_implemented)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_opts>())).ignore_invalid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(ignore_invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_opts>())).silence_invalid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(silence_invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_opts>())).bgp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(bgp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_opts>())).bmp as *const _ as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_opts),
            "::",
            stringify!(bmp)
        )
    );
}
pub type parsebgp_opts_t = parsebgp_opts;
extern "C" {
    pub fn parsebgp_opts_init(opts: *mut parsebgp_opts_t);
}
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_msg {
    pub marker: [u8; 16usize],
    pub len: u16,
    pub type_: u8,
    pub types: parsebgp_bgp_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bgp_msg__bindgen_ty_1 {
    pub open: *mut parsebgp_bgp_open_t,
    pub update: *mut parsebgp_bgp_update_t,
    pub notification: *mut parsebgp_bgp_notification_t,
    pub route_refresh: *mut parsebgp_bgp_route_refresh_t,
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_msg__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_msg__bindgen_ty_1>())).open as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg__bindgen_ty_1),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_msg__bindgen_ty_1>())).update as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg__bindgen_ty_1),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_msg__bindgen_ty_1>())).notification as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg__bindgen_ty_1),
            "::",
            stringify!(notification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bgp_msg__bindgen_ty_1>())).route_refresh as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg__bindgen_ty_1),
            "::",
            stringify!(route_refresh)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bgp_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bgp_msg>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bgp_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bgp_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bgp_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_msg>())).marker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_msg>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_msg>())).type_ as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bgp_msg>())).types as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bgp_msg),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_bgp_msg_t = parsebgp_bgp_msg;
extern "C" {
    pub fn parsebgp_bgp_decode(
        opts: *mut parsebgp_opts_t,
        msg: *mut parsebgp_bgp_msg_t,
        buffer: *const u8,
        len: *mut size_t,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_bgp_decode_ext(
        opts: *mut parsebgp_opts_t,
        msg: *mut parsebgp_bgp_msg_t,
        buffer: *const u8,
        len: *mut size_t,
        allow_truncation: ::std::os::raw::c_int,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_bgp_destroy_msg(msg: *mut parsebgp_bgp_msg_t);
}
extern "C" {
    pub fn parsebgp_bgp_clear_msg(msg: *mut parsebgp_bgp_msg_t);
}
extern "C" {
    pub fn parsebgp_bgp_dump_msg(msg: *const parsebgp_bgp_msg_t, depth: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_info_tlv {
    pub type_: u16,
    pub len: u16,
    pub info: *mut u8,
    pub _info_alloc_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_info_tlv() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_info_tlv>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_info_tlv))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_info_tlv>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_info_tlv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_info_tlv>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_info_tlv),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_info_tlv>())).len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_info_tlv),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_info_tlv>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_info_tlv),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_info_tlv>()))._info_alloc_len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_info_tlv),
            "::",
            stringify!(_info_alloc_len)
        )
    );
}
pub type parsebgp_bmp_info_tlv_t = parsebgp_bmp_info_tlv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_stats_counter_afi_safi_gauge {
    pub afi: u16,
    pub safi: u8,
    pub gauge_u64: u64,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_stats_counter_afi_safi_gauge() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_stats_counter_afi_safi_gauge>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_stats_counter_afi_safi_gauge>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_counter_afi_safi_gauge>())).afi as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_counter_afi_safi_gauge>())).safi as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge),
            "::",
            stringify!(safi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_counter_afi_safi_gauge>())).gauge_u64
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_counter_afi_safi_gauge),
            "::",
            stringify!(gauge_u64)
        )
    );
}
pub type parsebgp_bmp_stats_counter_afi_safi_gauge_t = parsebgp_bmp_stats_counter_afi_safi_gauge;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct stat_counter {
    pub type_: u16,
    pub len: u16,
    pub data: stat_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union stat_counter__bindgen_ty_1 {
    pub counter_u32: u32,
    pub gauge_u64: u64,
    pub afi_safi_gauge: parsebgp_bmp_stats_counter_afi_safi_gauge_t,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_stat_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<stat_counter__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(stat_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<stat_counter__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(stat_counter__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat_counter__bindgen_ty_1>())).counter_u32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter__bindgen_ty_1),
            "::",
            stringify!(counter_u32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat_counter__bindgen_ty_1>())).gauge_u64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter__bindgen_ty_1),
            "::",
            stringify!(gauge_u64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat_counter__bindgen_ty_1>())).afi_safi_gauge as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter__bindgen_ty_1),
            "::",
            stringify!(afi_safi_gauge)
        )
    );
}
#[test]
fn bindgen_test_layout_stat_counter() {
    assert_eq!(
        ::std::mem::size_of::<stat_counter>(),
        24usize,
        concat!("Size of: ", stringify!(stat_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<stat_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(stat_counter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat_counter>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat_counter>())).len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat_counter>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat_counter),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_bmp_stats_counter_t = stat_counter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_stats_report {
    pub stats_count: u32,
    pub counters: *mut parsebgp_bmp_stats_counter_t,
    pub _counters_alloc_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_stats_report() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_stats_report>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_stats_report))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_stats_report>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_stats_report))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_report>())).stats_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_report),
            "::",
            stringify!(stats_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_report>())).counters as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_report),
            "::",
            stringify!(counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_stats_report>()))._counters_alloc_cnt as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_stats_report),
            "::",
            stringify!(_counters_alloc_cnt)
        )
    );
}
pub type parsebgp_bmp_stats_report_t = parsebgp_bmp_stats_report;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_peer_down {
    pub reason: u8,
    pub data: parsebgp_bmp_peer_down__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_peer_down__bindgen_ty_1 {
    pub fsm_code: u16,
    pub notification: *mut parsebgp_bgp_msg_t,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_peer_down__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_peer_down__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bmp_peer_down__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_peer_down__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bmp_peer_down__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_down__bindgen_ty_1>())).fsm_code as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_down__bindgen_ty_1),
            "::",
            stringify!(fsm_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_down__bindgen_ty_1>())).notification
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_down__bindgen_ty_1),
            "::",
            stringify!(notification)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_peer_down() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_peer_down>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_peer_down))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_peer_down>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_peer_down))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_down>())).reason as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_down),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_down>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_down),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_bmp_peer_down_t = parsebgp_bmp_peer_down;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_peer_up {
    pub local_ip: [u8; 16usize],
    pub local_ip_afi: parsebgp_bgp_afi_t,
    pub local_port: u16,
    pub remote_port: u16,
    pub sent_open: *mut parsebgp_bgp_msg_t,
    pub recv_open: *mut parsebgp_bgp_msg_t,
    pub tlvs: *mut parsebgp_bmp_info_tlv_t,
    pub _tlvs_alloc_cnt: ::std::os::raw::c_int,
    pub tlvs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_peer_up() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_peer_up>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_peer_up))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_peer_up>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_peer_up))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).local_ip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(local_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).local_ip_afi as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(local_ip_afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).local_port as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(local_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).remote_port as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(remote_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).sent_open as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(sent_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).recv_open as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(recv_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).tlvs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(tlvs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_peer_up>()))._tlvs_alloc_cnt as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(_tlvs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_up>())).tlvs_cnt as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_up),
            "::",
            stringify!(tlvs_cnt)
        )
    );
}
pub type parsebgp_bmp_peer_up_t = parsebgp_bmp_peer_up;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_init_msg {
    pub tlvs: *mut parsebgp_bmp_info_tlv_t,
    pub _tlvs_alloc_cnt: ::std::os::raw::c_int,
    pub tlvs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_init_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_init_msg>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_init_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_init_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_init_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_init_msg>())).tlvs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_init_msg),
            "::",
            stringify!(tlvs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_init_msg>()))._tlvs_alloc_cnt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_init_msg),
            "::",
            stringify!(_tlvs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_init_msg>())).tlvs_cnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_init_msg),
            "::",
            stringify!(tlvs_cnt)
        )
    );
}
pub type parsebgp_bmp_init_msg_t = parsebgp_bmp_init_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_term_tlv {
    pub type_: u16,
    pub len: u16,
    pub info: parsebgp_bmp_term_tlv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_term_tlv__bindgen_ty_1 {
    pub string: *mut ::std::os::raw::c_char,
    pub _string_alloc_len: ::std::os::raw::c_int,
    pub reason: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_term_tlv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_term_tlv__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_term_tlv__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_term_tlv__bindgen_ty_1>())).string as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_term_tlv__bindgen_ty_1>()))._string_alloc_len
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1),
            "::",
            stringify!(_string_alloc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_term_tlv__bindgen_ty_1>())).reason as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv__bindgen_ty_1),
            "::",
            stringify!(reason)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_term_tlv() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_term_tlv>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_term_tlv))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_term_tlv>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_term_tlv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_tlv>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_tlv>())).len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_tlv>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_tlv),
            "::",
            stringify!(info)
        )
    );
}
pub type parsebgp_bmp_term_tlv_t = parsebgp_bmp_term_tlv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_term_msg {
    pub tlvs: *mut parsebgp_bmp_term_tlv_t,
    pub _tlvs_alloc_cnt: ::std::os::raw::c_int,
    pub tlvs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_term_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_term_msg>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_term_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_term_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_term_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_msg>())).tlvs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_msg),
            "::",
            stringify!(tlvs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_term_msg>()))._tlvs_alloc_cnt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_msg),
            "::",
            stringify!(_tlvs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_term_msg>())).tlvs_cnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_term_msg),
            "::",
            stringify!(tlvs_cnt)
        )
    );
}
pub type parsebgp_bmp_term_msg_t = parsebgp_bmp_term_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_route_mirror_tlv {
    pub type_: u16,
    pub len: u16,
    pub values: parsebgp_bmp_route_mirror_tlv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_route_mirror_tlv__bindgen_ty_1 {
    pub bgp_msg: *mut parsebgp_bgp_msg_t,
    pub code: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_route_mirror_tlv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_route_mirror_tlv__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_bmp_route_mirror_tlv__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_route_mirror_tlv__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_bmp_route_mirror_tlv__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv__bindgen_ty_1>())).bgp_msg
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv__bindgen_ty_1),
            "::",
            stringify!(bgp_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv__bindgen_ty_1>())).code as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv__bindgen_ty_1),
            "::",
            stringify!(code)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_route_mirror_tlv() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_route_mirror_tlv>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_route_mirror_tlv))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_route_mirror_tlv>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_route_mirror_tlv))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv>())).len as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror_tlv>())).values as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror_tlv),
            "::",
            stringify!(values)
        )
    );
}
pub type parsebgp_bmp_route_mirror_tlv_t = parsebgp_bmp_route_mirror_tlv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_route_mirror {
    pub tlvs: *mut parsebgp_bmp_route_mirror_tlv_t,
    pub _tlvs_alloc_cnt: ::std::os::raw::c_int,
    pub tlvs_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_route_mirror() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_route_mirror>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_route_mirror))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_route_mirror>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_route_mirror))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_route_mirror>())).tlvs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror),
            "::",
            stringify!(tlvs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror>()))._tlvs_alloc_cnt as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror),
            "::",
            stringify!(_tlvs_alloc_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_route_mirror>())).tlvs_cnt as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_route_mirror),
            "::",
            stringify!(tlvs_cnt)
        )
    );
}
pub type parsebgp_bmp_route_mirror_t = parsebgp_bmp_route_mirror;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_peer_hdr {
    pub type_: u8,
    pub flags: u8,
    pub dist_id: u64,
    pub addr: [u8; 16usize],
    pub afi: parsebgp_bgp_afi_t,
    pub asn: u32,
    pub bgp_id: [u8; 4usize],
    pub ts_sec: u32,
    pub ts_usec: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_peer_hdr() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_peer_hdr>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_peer_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_peer_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_peer_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).dist_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(dist_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).afi as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).asn as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).bgp_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(bgp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).ts_sec as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(ts_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_peer_hdr>())).ts_usec as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_peer_hdr),
            "::",
            stringify!(ts_usec)
        )
    );
}
pub type parsebgp_bmp_peer_hdr_t = parsebgp_bmp_peer_hdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_msg {
    pub version: u8,
    pub len: u32,
    pub type_: u8,
    pub peer_hdr: parsebgp_bmp_peer_hdr_t,
    pub types_valid: ::std::os::raw::c_int,
    pub types: parsebgp_bmp_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_bmp_msg__bindgen_ty_1 {
    pub route_mon: *mut parsebgp_bgp_msg_t,
    pub stats_report: *mut parsebgp_bmp_stats_report_t,
    pub peer_down: *mut parsebgp_bmp_peer_down_t,
    pub peer_up: *mut parsebgp_bmp_peer_up_t,
    pub init_msg: *mut parsebgp_bmp_init_msg_t,
    pub term_msg: *mut parsebgp_bmp_term_msg_t,
    pub route_mirror: *mut parsebgp_bmp_route_mirror_t,
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_msg__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).route_mon as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(route_mon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).stats_report as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(stats_report)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).peer_down as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(peer_down)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).peer_up as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(peer_up)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).init_msg as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(init_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).term_msg as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(term_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_bmp_msg__bindgen_ty_1>())).route_mirror as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg__bindgen_ty_1),
            "::",
            stringify!(route_mirror)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_bmp_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_bmp_msg>(),
        136usize,
        concat!("Size of: ", stringify!(parsebgp_bmp_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_bmp_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_bmp_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).peer_hdr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(peer_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).types_valid as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(types_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_bmp_msg>())).types as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_bmp_msg),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_bmp_msg_t = parsebgp_bmp_msg;
extern "C" {
    pub fn parsebgp_bmp_decode(
        opts: *mut parsebgp_opts_t,
        msg: *mut parsebgp_bmp_msg_t,
        buffer: *const u8,
        len: *mut size_t,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_bmp_destroy_msg(msg: *mut parsebgp_bmp_msg_t);
}
extern "C" {
    pub fn parsebgp_bmp_clear_msg(msg: *mut parsebgp_bmp_msg_t);
}
extern "C" {
    pub fn parsebgp_bmp_dump_msg(msg: *const parsebgp_bmp_msg_t, depth: ::std::os::raw::c_int);
}
pub const parsebgp_mrt_asn_type_t_PARSEBGP_MRT_ASN_2_BYTE: parsebgp_mrt_asn_type_t = 0;
pub const parsebgp_mrt_asn_type_t_PARSEBGP_MRT_ASN_4_BYTE: parsebgp_mrt_asn_type_t = 1;
pub type parsebgp_mrt_asn_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_mrt_table_dump {
    pub view_number: u16,
    pub sequence: u16,
    pub prefix: [u8; 16usize],
    pub prefix_len: u8,
    pub status: u8,
    pub originated_time: u32,
    pub peer_ip: [u8; 16usize],
    pub peer_asn: u16,
    pub path_attrs: parsebgp_bgp_update_path_attrs_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump>(),
        600usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_table_dump))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_table_dump))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).view_number as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(view_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).sequence as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).prefix as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).prefix_len as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(prefix_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).status as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).originated_time as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(originated_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).peer_ip as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(peer_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).peer_asn as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(peer_asn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump>())).path_attrs as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump),
            "::",
            stringify!(path_attrs)
        )
    );
}
pub type parsebgp_mrt_table_dump_t = parsebgp_mrt_table_dump;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2_peer_entry {
    pub asn_type: parsebgp_mrt_asn_type_t,
    pub ip_afi: parsebgp_bgp_afi_t,
    pub bgp_id: [u8; 4usize],
    pub ip: [u8; 16usize],
    pub asn: u32,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2_peer_entry() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2_peer_entry>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2_peer_entry>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).asn_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(asn_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).ip_afi as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(ip_afi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).bgp_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(bgp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).ip as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_entry>())).asn as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_entry),
            "::",
            stringify!(asn)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_peer_entry_t = parsebgp_mrt_table_dump_v2_peer_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2_peer_index {
    pub collector_bgp_id: [u8; 4usize],
    pub view_name_len: u16,
    pub view_name: *mut ::std::os::raw::c_char,
    pub _view_name_alloc_len: u16,
    pub peer_count: u16,
    pub peer_entries: *mut parsebgp_mrt_table_dump_v2_peer_entry_t,
    pub _peer_entries_alloc_cnt: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2_peer_index() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2_peer_index>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2_peer_index>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).collector_bgp_id
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(collector_bgp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).view_name_len
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(view_name_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).view_name as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(view_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>()))._view_name_alloc_len
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(_view_name_alloc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).peer_count as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(peer_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>())).peer_entries
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(peer_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_peer_index>()))
                ._peer_entries_alloc_cnt as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_peer_index),
            "::",
            stringify!(_peer_entries_alloc_cnt)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_peer_index_t = parsebgp_mrt_table_dump_v2_peer_index;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2_rib_entry {
    pub peer_index: u16,
    pub originated_time: u32,
    pub path_attrs: parsebgp_bgp_update_path_attrs_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2_rib_entry() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2_rib_entry>(),
        560usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2_rib_entry>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_rib_entry>())).peer_index as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry),
            "::",
            stringify!(peer_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_rib_entry>())).originated_time
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry),
            "::",
            stringify!(originated_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_rib_entry>())).path_attrs as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_rib_entry),
            "::",
            stringify!(path_attrs)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_rib_entry_t = parsebgp_mrt_table_dump_v2_rib_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2_afi_safi_rib {
    pub sequence: u32,
    pub prefix_len: u8,
    pub prefix: [u8; 16usize],
    pub entry_count: u16,
    pub entries: *mut parsebgp_mrt_table_dump_v2_rib_entry_t,
    pub _entries_alloc_cnt: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2_afi_safi_rib() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2_afi_safi_rib>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2_afi_safi_rib>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).sequence as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).prefix_len
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(prefix_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).prefix as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).entry_count
                as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(entry_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>())).entries as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2_afi_safi_rib>()))._entries_alloc_cnt
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2_afi_safi_rib),
            "::",
            stringify!(_entries_alloc_cnt)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_afi_safi_rib_t = parsebgp_mrt_table_dump_v2_afi_safi_rib;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_table_dump_v2 {
    pub peer_index: parsebgp_mrt_table_dump_v2_peer_index_t,
    pub afi_safi_rib: parsebgp_mrt_table_dump_v2_afi_safi_rib_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_table_dump_v2() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_table_dump_v2>(),
        80usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_table_dump_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_table_dump_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_table_dump_v2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2>())).peer_index as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2),
            "::",
            stringify!(peer_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_table_dump_v2>())).afi_safi_rib as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_table_dump_v2),
            "::",
            stringify!(afi_safi_rib)
        )
    );
}
pub type parsebgp_mrt_table_dump_v2_t = parsebgp_mrt_table_dump_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp4mp_state_change {
    pub old_state: u16,
    pub new_state: u16,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp4mp_state_change() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp4mp_state_change>(),
        4usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp4mp_state_change))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp4mp_state_change>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_bgp4mp_state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp_state_change>())).old_state as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp_state_change),
            "::",
            stringify!(old_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp_state_change>())).new_state as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp_state_change),
            "::",
            stringify!(new_state)
        )
    );
}
pub type parsebgp_mrt_bgp4mp_state_change_t = parsebgp_mrt_bgp4mp_state_change;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp {
    pub peer_asn: u16,
    pub peer_ip: [u8; 16usize],
    pub local_asn: u16,
    pub local_ip: [u8; 16usize],
    pub data: parsebgp_mrt_bgp__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp__bindgen_ty_1 {
    pub update: *mut parsebgp_bgp_update_t,
    pub state_change: parsebgp_mrt_bgp4mp_state_change_t,
    pub open: *mut parsebgp_bgp_open_t,
    pub notification: *mut parsebgp_bgp_notification_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_bgp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp__bindgen_ty_1>())).update as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp__bindgen_ty_1),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp__bindgen_ty_1>())).state_change as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp__bindgen_ty_1),
            "::",
            stringify!(state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp__bindgen_ty_1>())).open as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp__bindgen_ty_1),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp__bindgen_ty_1>())).notification as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp__bindgen_ty_1),
            "::",
            stringify!(notification)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp>(),
        72usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_bgp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).peer_asn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(peer_asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).peer_ip as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(peer_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).local_asn as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(local_asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).local_ip as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(local_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_mrt_bgp_t = parsebgp_mrt_bgp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp4mp {
    pub peer_asn: u32,
    pub local_asn: u32,
    pub interface_index: u16,
    pub afi: u16,
    pub peer_ip: [u8; 16usize],
    pub local_ip: [u8; 16usize],
    pub data: parsebgp_mrt_bgp4mp__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_bgp4mp__bindgen_ty_1 {
    pub state_change: parsebgp_mrt_bgp4mp_state_change_t,
    pub bgp_msg: *mut parsebgp_bgp_msg_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp4mp__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp4mp__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp4mp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp4mp__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(parsebgp_mrt_bgp4mp__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp__bindgen_ty_1>())).state_change as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp__bindgen_ty_1),
            "::",
            stringify!(state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp__bindgen_ty_1>())).bgp_msg as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp__bindgen_ty_1),
            "::",
            stringify!(bgp_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_bgp4mp() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_bgp4mp>(),
        64usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_bgp4mp))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_bgp4mp>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_bgp4mp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).peer_asn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(peer_asn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).local_asn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(local_asn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).interface_index as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(interface_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).afi as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(afi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).peer_ip as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(peer_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).local_ip as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(local_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_bgp4mp>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_bgp4mp),
            "::",
            stringify!(data)
        )
    );
}
pub type parsebgp_mrt_bgp4mp_t = parsebgp_mrt_bgp4mp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_msg {
    pub timestamp_sec: u32,
    pub type_: u16,
    pub subtype: u16,
    pub len: u32,
    pub timestamp_usec: u32,
    pub types: parsebgp_mrt_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_mrt_msg__bindgen_ty_1 {
    pub bgp: *mut parsebgp_mrt_bgp_t,
    pub table_dump: *mut parsebgp_mrt_table_dump_t,
    pub table_dump_v2: *mut parsebgp_mrt_table_dump_v2_t,
    pub bgp4mp: *mut parsebgp_mrt_bgp4mp_t,
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_msg__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_msg__bindgen_ty_1>())).bgp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg__bindgen_ty_1),
            "::",
            stringify!(bgp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_msg__bindgen_ty_1>())).table_dump as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg__bindgen_ty_1),
            "::",
            stringify!(table_dump)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_msg__bindgen_ty_1>())).table_dump_v2 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg__bindgen_ty_1),
            "::",
            stringify!(table_dump_v2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<parsebgp_mrt_msg__bindgen_ty_1>())).bgp4mp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg__bindgen_ty_1),
            "::",
            stringify!(bgp4mp)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_mrt_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_mrt_msg>(),
        48usize,
        concat!("Size of: ", stringify!(parsebgp_mrt_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_mrt_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_mrt_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).timestamp_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(timestamp_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).subtype as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).timestamp_usec as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(timestamp_usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_mrt_msg>())).types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_mrt_msg),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_mrt_msg_t = parsebgp_mrt_msg;
extern "C" {
    pub fn parsebgp_mrt_decode(
        opts: *mut parsebgp_opts_t,
        msg: *mut parsebgp_mrt_msg_t,
        buf: *const u8,
        len: *mut size_t,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_mrt_destroy_msg(msg: *mut parsebgp_mrt_msg_t);
}
extern "C" {
    pub fn parsebgp_mrt_clear_msg(msg: *mut parsebgp_mrt_msg_t);
}
extern "C" {
    pub fn parsebgp_mrt_dump_msg(msg: *const parsebgp_mrt_msg_t, depth: ::std::os::raw::c_int);
}
pub const parsebgp_msg_type_PARSEBGP_MSG_TYPE_INVALID: parsebgp_msg_type = 0;
pub const parsebgp_msg_type_PARSEBGP_MSG_TYPE_BGP: parsebgp_msg_type = 1;
pub const parsebgp_msg_type_PARSEBGP_MSG_TYPE_BMP: parsebgp_msg_type = 2;
pub const parsebgp_msg_type_PARSEBGP_MSG_TYPE_MRT: parsebgp_msg_type = 3;
pub type parsebgp_msg_type = ::std::os::raw::c_uint;
pub use self::parsebgp_msg_type as parsebgp_msg_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_msg {
    pub type_: parsebgp_msg_type_t,
    pub types: parsebgp_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parsebgp_msg__bindgen_ty_1 {
    pub bgp: *mut parsebgp_bgp_msg_t,
    pub bmp: *mut parsebgp_bmp_msg_t,
    pub mrt: *mut parsebgp_mrt_msg_t,
}
#[test]
fn bindgen_test_layout_parsebgp_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_msg__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(parsebgp_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg__bindgen_ty_1>())).bgp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg__bindgen_ty_1),
            "::",
            stringify!(bgp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg__bindgen_ty_1>())).bmp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg__bindgen_ty_1),
            "::",
            stringify!(bmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg__bindgen_ty_1>())).mrt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg__bindgen_ty_1),
            "::",
            stringify!(mrt)
        )
    );
}
#[test]
fn bindgen_test_layout_parsebgp_msg() {
    assert_eq!(
        ::std::mem::size_of::<parsebgp_msg>(),
        32usize,
        concat!("Size of: ", stringify!(parsebgp_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<parsebgp_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(parsebgp_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parsebgp_msg>())).types as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsebgp_msg),
            "::",
            stringify!(types)
        )
    );
}
pub type parsebgp_msg_t = parsebgp_msg;
extern "C" {
    pub fn parsebgp_decode(
        opts: parsebgp_opts_t,
        type_: parsebgp_msg_type_t,
        msg: *mut parsebgp_msg_t,
        buffer: *const u8,
        len: *mut size_t,
    ) -> parsebgp_error_t;
}
extern "C" {
    pub fn parsebgp_create_msg() -> *mut parsebgp_msg_t;
}
extern "C" {
    pub fn parsebgp_clear_msg(msg: *mut parsebgp_msg_t);
}
extern "C" {
    pub fn parsebgp_destroy_msg(msg: *mut parsebgp_msg_t);
}
extern "C" {
    pub fn parsebgp_dump_msg(msg: *const parsebgp_msg_t);
}
